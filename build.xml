<!-- build configuration -->
<project name="bang" default="qcompile" basedir=".">

  <!-- things you probably don't want to change -->
  <property name="src.dir"        value="src/java"/>
  <property name="deploy.dir"     value="dist"/>
  <property name="app.name"       value="bang"/>
  <property name="savedoc.dir"    value="docs"/>
  <property name="build.optimize" value="on"/>
  <property name="nartool.path"   value="${basedir}/projects/narya/bin"/>

  <!-- define our subprojects and include the standard build system -->
  <property name="projects" value="samskivert,jme-bui,narya,nenya,vilya,threerings"/>
  <property name="webapps" value="office"/>
  <import file="projects/tools/etc/build-support.xml"/>

  <!-- declare the properties files. -->
  <property name="props.list" value="server.properties,deployment.properties"/>
  <property name="optprops.list"  value="build.properties"/>

  <!-- declare the files from bin needed in the package -->
  <property name="bin.list1"  value="bangjava,bangserver,bangtool,mysql,process_stats"/>
  <property name="bin.list2"  value="roll_logs,runbang,summarize_perf,summarize_stats"/>
  <property name="bin.list3"  value="bang,bangrespawn,bangrestart"/>
  <property name="bin.list"   value="${bin.list1},${bin.list2},${bin.list3}"/>

  <!-- declare the libraries needed by the Bang runtime -->
  <filelist dir="." id="dist.libs">
    <file name="${extlib.dir}/ant-contrib.jar"/>
    <file name="${extlib.dir}/ant-nodeps.jar"/>
    <file name="${extlib.dir}/ant.jar"/>
    <file name="${extlib.dir}/commons-beanutils.jar"/>
    <file name="${extlib.dir}/commons-collections.jar"/>
    <file name="${extlib.dir}/commons-digester.jar"/>
    <file name="${extlib.dir}/commons-io.jar"/>
    <file name="${extlib.dir}/commons-lang.jar"/>
    <file name="${extlib.dir}/commons-logging.jar"/>
    <file name="${extlib.dir}/ehcache-1.2.jar"/>
    <file name="${extlib.dir}/getdown.jar"/>
    <file name="${extlib.dir}/junit-3.7.jar"/>
    <file name="${extlib.dir}/mail.jar"/>
    <file name="${extlib.dir}/mysql-connector-java-3.1.12-bin.jar"/>
    <file name="${extlib.dir}/proguard.jar"/>
    <file name="${extlib.dir}/servlet-2.3.jar"/>
    <file name="${extlib.dir}/underwire.jar"/>
    <file name="${extlib.dir}/velocity-1.5-dev.jar"/>
    <file name="lib/lwjgl.jar"/>
    <file name="lib/lwjgl_util.jar"/>
    <file name="lib/jorbis-0.0.12.jar"/>
    <file name="lib/jogg-0.0.5.jar"/>
    <file name="lib/hemiptera.jar"/>
  </filelist>

  <!-- declare our classpath -->
  <path id="classpath">
    <pathelement location="${deploy.dir}/classes"/>
    <fileset dir="${deploy.dir}/lib" includes="**/*.jar"/>
    <fileset dir="${deploy.dir}" includes="bang-code.jar"/>
  </path>

  <!-- declare a classpath for tool tasks -->
  <path id="tool.classpath">
    <pathelement location="${deploy.dir}"/>
    <fileset dir="${deploy.dir}/lib" includes="**/*.jar"/>
    <fileset dir="${deploy.dir}" includes="bang-code.jar"/>
    <fileset dir="${deploy.dir}" includes="bang-server-config.jar"/>
  </path>

  <!-- prepares the application directories -->
  <target name="prepare" depends="copydistlibs,copydistprops,lists">
    <mkdir dir="${deploy.dir}"/>
    <mkdir dir="${deploy.dir}/docs"/>
    <mkdir dir="${deploy.dir}/lib"/>
    <mkdir dir="${deploy.dir}/classes"/>
    <mkdir dir="${deploy.dir}/classes/rsrc"/>
    <copy todir="${deploy.dir}/classes/rsrc">
      <fileset dir="rsrc">
       <include name="**/*"/>
       <exclude name="units/**"/>
       <exclude name="props/**"/>
       <exclude name="effects/**"/>
       <exclude name="extras/**"/>
       <exclude name="bonuses/**"/>
       <exclude name="bounties/**"/>
       <exclude name="boards/**"/>
       <exclude name="avatars/**"/>
       <exclude name="goods/**"/>
       <exclude name="sounds/**"/>
       <exclude name="tutorials/**/*.xml"/>
       <exclude name="config/**/*.xml"/>
       <exclude name="**/*.properties"/>
       <exclude name="**/*.bss"/>
       <exclude name="**/*.css"/>
       <exclude name="**/*.txt"/>
       <exclude name="**/*.jar"/>
       <exclude name="**/*.dat"/>
       <exclude name="**/*.wav"/>
       <exclude name="**/source/**"/>
      </fileset>
    </copy>
  </target>

  <!-- generates additional methods for distributed object classes -->
  <target name="gendobj" depends="prepare">
    <taskdef name="dobj" classpathref="tool.classpath"
             classname="com.threerings.presents.tools.GenDObjectTask"/>
    <!-- make sure the dobject class files are all compiled -->
    <javac srcdir="src/java" destdir="${deploy.dir}/classes" includeAntRuntime="false"
           debug="on" optimize="${build.optimize}" deprecation="on">
      <classpath refid="classpath"/>
      <include name="**/*Object.java"/>
    </javac>
    <!-- now generate the associated files -->
    <dobj classpathref="classpath">
      <fileset dir="src/java" includes="**/*Object.java"/>
    </dobj>
  </target>

  <!-- generates marshaller and dispatcher classes for all invocation -->
  <!-- service declarations -->
  <target name="genservice" depends="prepare">
    <taskdef name="service" classpathref="tool.classpath"
             classname="com.threerings.presents.tools.GenServiceTask"/>
    <!-- make sure the service class files are all compiled -->
    <javac srcdir="src/java" destdir="${deploy.dir}/classes" includeAntRuntime="false"
           debug="on" optimize="${build.optimize}" deprecation="on">
      <classpath refid="classpath"/>
      <include name="**/*Service.java"/>
    </javac>
    <!-- now generate the associated files -->
    <service header="lib/SOURCE_HEADER" classpathref="classpath">
      <fileset dir="src/java" includes="**/*Service.java"/>
    </service>
  </target>

  <!-- generates sender and decoder classes for all invocation -->
  <!-- receiver declarations -->
  <target name="genreceiver" depends="prepare">
    <taskdef name="receiver" classpathref="tool.classpath"
             classname="com.threerings.presents.tools.GenReceiverTask"/>
    <!-- make sure the receiver class files are all compiled -->
    <javac srcdir="src/java" destdir="${deploy.dir}/classes" includeAntRuntime="false"
           debug="on" optimize="${build.optimize}" deprecation="on">
      <classpath refid="classpath"/>
      <include name="**/*Receiver.java"/>
      <exclude name="**/InvocationReceiver.java"/>
    </javac>
    <!-- now generate the associated files -->
    <receiver header="lib/SOURCE_HEADER" classpathref="classpath">
      <fileset dir="src/java" includes="**/*Receiver.java" excludes="**/InvocationReceiver.java"/>
    </receiver>
  </target>

  <!-- encodes our sounds to ogg and enumerates them into a master list -->
  <target name="sounds">
    <exec executable="${basedir}/bin/encode_sounds" failonerror="true"/>
    <exec executable="find" output="rsrc/sounds.txt">
      <arg value="rsrc"/>
      <arg value="-name"/>
      <arg value="*.ogg"/>
      <arg value="!"/>
      <arg value="-path"/>
      <arg value="rsrc/sounds/music/*"/>
    </exec>
    <jar file="rsrc/sounds/effects/bundle.jar" basedir="rsrc/sounds/effects">
      <include name="**/*.ogg"/>
      <exclude name="**/source/**"/>
    </jar>
    <jar file="rsrc/sounds/feedback/bundle.jar" basedir="rsrc/sounds/feedback">
      <include name="**/*.ogg"/>
      <exclude name="**/source/**"/>
    </jar>
  </target>

  <!-- enumerates all of our units, props, etc. into master lists -->
  <target name="lists">
    <exec executable="${basedir}/bin/update_lists"/>
  </target>

  <!-- builds bundles for a specific town -->
  <target name="town_bundles">
    <jar file="rsrc/units/${town}/bundle.jar" basedir="rsrc/units/${town}">
      <include name="units.txt"/>
      <include name="**/unit.properties"/>
      <include name="**/*.png"/>
      <include name="**/model.dat"/>
      <include name="**/*.ogg"/>
      <exclude name="**/source/**"/>
    </jar>
    <jar file="rsrc/props/${town}/bundle.jar" basedir="rsrc/props/${town}">
      <include name="props.txt"/>
      <include name="**/prop.properties"/>
      <include name="**/*.png"/>
      <include name="**/model.dat"/>
      <include name="**/*.ogg"/>
      <exclude name="**/source/**"/>
    </jar>
    <jar file="rsrc/bonuses/${town}/bundle.jar" basedir="rsrc/bonuses/${town}">
      <include name="bonuses.txt"/>
      <include name="**/bonus.properties"/>
      <include name="**/*.png"/>
      <include name="**/model.dat"/>
      <include name="**/*.ogg"/>
      <exclude name="**/source/**"/>
    </jar>
    <jar file="rsrc/effects/${town}/bundle.jar" basedir="rsrc/effects/${town}">
      <include name="**/particles.txt"/>
      <include name="**/particles.properties"/>
      <include name="**/particles.jme"/>
      <include name="**/icons.txt"/>
      <include name="**/icon.properties"/>
      <include name="**/*.png"/>
      <include name="**/*.ogg"/>
      <exclude name="**/source/**"/>
    </jar>
    <jar file="rsrc/extras/${town}/bundle.jar" basedir="rsrc/extras/${town}">
      <include name="**/*.png"/>
      <include name="**/model.dat"/>
      <include name="**/*.ogg"/>
      <exclude name="**/source/**"/>
    </jar>
    <jar file="rsrc/goods/${town}/bundle.jar" basedir="rsrc/goods/${town}">
      <include name="**/*.png"/>
      <exclude name="**/source/**"/>
    </jar>
    <jar file="rsrc/bounties/${town}/bundle.jar" basedir="rsrc/bounties/${town}">
      <include name="**/bounties.txt"/>
      <include name="**/*.png"/>
      <include name="**/*.game"/>
      <include name="**/*.properties"/>
      <exclude name="**/source/**"/>
    </jar>
    <jar file="rsrc/sounds/music/${town}/bundle.jar"
         basedir="rsrc/sounds/music/${town}">
      <include name="**/*.ogg"/>
      <exclude name="**/source/**"/>
    </jar>
  </target>

  <!-- compiles our models -->
  <target name="models">
    <taskdef name="compile" classpathref="tool.classpath"
             classname="com.threerings.jme.tools.CompileModelTask"/>
    <compile>
      <fileset dir="rsrc" includes="**/model.properties"/>
    </compile>
    <taskdef name="updatepropheight" classpathref="tool.classpath"
             classname="com.threerings.bang.tools.UpdatePropHeightTask"/>
    <updatepropheight>
      <fileset dir="rsrc" includes="**/prop.properties"/>
    </updatepropheight>
    <jar file="rsrc/units/wreckage/bundle.jar" basedir="rsrc/units/wreckage">
      <include name="**/*.png"/>
      <include name="**/model.dat"/>
      <include name="**/*.ogg"/>
      <exclude name="**/source/**"/>
    </jar>
    <antcall target="town_bundles">
      <param name="town" value="frontier_town"/>
    </antcall>
    <antcall target="town_bundles">
      <param name="town" value="indian_post"/>
    </antcall>
    <antcall target="town_bundles">
      <param name="town" value="boom_town"/>
    </antcall>
  </target>

  <!-- loads our boards into the database -->
  <target name="boards">
    <taskdef name="loadboard" classpathref="tool.classpath"
             classname="com.threerings.bang.tools.LoadBoardTask"/>
    <loadboard home=".">
      <fileset dir="rsrc/boards" includes="**/*.board"/>
    </loadboard>
  </target>

  <!-- compiles our tutorial XML definitions -->
  <target name="tutorials">
    <taskdef name="confcomp" classpathref="tool.classpath"
             classname="com.threerings.tools.CompiledConfigTask"/>
    <confcomp parser="com.threerings.bang.game.tools.xml.TutorialConfigParser">
      <fileset dir="rsrc/tutorials" includes="**/*.xml"/>
    </confcomp>
  </target>

  <!-- creates the serialized color repository config -->
  <target name="colorpos">
    <taskdef name="confcomp" classpathref="tool.classpath"
      classname="com.threerings.tools.CompiledConfigTask"/>
    <confcomp parser="com.threerings.media.image.tools.xml.ColorPositoryParser"
              configdef="rsrc/config/media/colordefs.xml"/>
  </target>

  <!-- creates the serialized article and aspect catalogs -->
  <target name="catalogs">
    <taskdef name="confcomp" classpathref="tool.classpath"
             classname="com.threerings.tools.CompiledConfigTask"/>
    <confcomp configdef="rsrc/avatars/articles.xml"
              parser="com.threerings.bang.avatar.tools.xml.ArticleCatalogParser"/>
    <confcomp configdef="rsrc/avatars/aspects.xml"
              parser="com.threerings.bang.avatar.tools.xml.AspectCatalogParser"/>
  </target>

  <!-- builds the avatar component bundles -->
  <target name="avatars" depends="catalogs">
    <taskdef name="metabundle" classpathref="tool.classpath"
             classname="com.threerings.cast.bundle.tools.MetadataBundlerTask"/>
    <metabundle actiondef="${basedir}/rsrc/avatars/actions.xml"
                classdef="${basedir}/rsrc/avatars/classes.xml"
                target="rsrc/avatars/metadata.jar"/>
    <ant target="bundles" dir="rsrc/avatars" antfile="build.xml"/>
  </target>

  <!-- run the unit tests -->
  <target name="tests" depends="compile" description="Runs unit tests.">
    <taskdef name="unit" classpathref="tool.classpath"
             classname="org.apache.tools.ant.taskdefs.optional.junit.JUnitTask"/>
    <unit printsummary="no" haltonfailure="yes" fork="true">
      <classpath refid="classpath"/>
      <formatter type="brief" usefile="false"/>
      <batchtest>
        <fileset dir="${src.dir}" includes="**/*UnitTest.java"/>
      </batchtest>
    </unit>
  </target>

  <!-- cleans out the compiled code -->
  <target name="clean">
    <delete dir="${deploy.dir}/classes/com"/>
    <delete><fileset dir="." includes="debug.txt*"/></delete>
  </target>

  <!-- fully cleans out the installed application -->
  <target name="distclean" depends="clean">
    <delete dir="${deploy.dir}"/>
    <delete><fileset dir="rsrc" includes="**/model.dat"/></delete>
    <delete><fileset dir="rsrc" includes="**/*.jar"/></delete>
    <delete><fileset dir="rsrc" includes="**/*.dat"/></delete>
    <delete>
      <fileset dir="rsrc">
        <exclude name="avatars/compmap.txt"/>
        <exclude name="terrain/codes.txt"/>
        <include name="**/*.txt"/>
      </fileset>
    </delete>
    <delete>
      <fileset dir=".">
        <exclude name="rsrc/sounds/music/**/*.ogg"/>
        <include name="rsrc/**/*.ogg"/>
      </fileset>
    </delete>
    <delete><fileset dir="etc/proguard" includes="*.map"/></delete>
    <delete dir="pages/devclient"/>
    <delete>
      <fileset dir="pages">
        <include name="aspects.html"/>
        <include name="boards.html"/>
        <include name="units.html"/>
      </fileset>
    </delete>
    <ant dir="projects/installers" target="clean"/>
  </target>

  <!-- build the java class files -->
  <target name="qcompile">
    <javac srcdir="${src.dir}" destdir="${deploy.dir}/classes" includeAntRuntime="false"
           debug="on" optimize="${build.optimize}" deprecation="on">
      <classpath refid="classpath"/>
      <compilerarg value="-Xlint"/>
      <compilerarg value="-Xlint:-serial"/>
    </javac>
  </target>
  <target name="compile" depends="prepare,qcompile">
    <!-- copy native libraries into ${deploy.dir}/lib -->
    <copy todir="${deploy.dir}/lib">
      <fileset dir="projects/narya/${deploy.dir}/lib" includes="**/libsignal.so"/>
      <fileset dir="lib/" includes="**/*.so"/>
      <fileset dir="lib/" includes="**/*.jnilib"/>
      <fileset dir="lib/" includes="**/*.dylib"/>
    </copy>
  </target>

  <!-- build the javadoc documentation -->
  <target name="javadoc" depends="prepare">
    <property name="copy.holder" value="Three Rings Design, Inc."/>
    <javadoc sourcepath="${src.dir}"
             packagenames="com.threerings.bang.*"
             windowtitle="Bang! Howdy API"
             doctitle="Bang! Howdy API"
             bottom="Copyright &#169; 2006 ${copy.holder}. All Rights Reserved."
             destdir="${deploy.dir}/docs"
             additionalparam="-breakiterator">
      <classpath refid="classpath"/>
      <link href="http://build.earth.threerings.net/docs/java/java1.5/"/>
    </javadoc>
  </target>

  <!-- builds the javadocs and stuffs them in a directory where they -->
  <!-- won't be blown away when we do "clean" next time -->
  <target name="savedoc" depends="javadoc">
    <delete dir="${savedoc.dir}/api"/>
    <copy todir="${savedoc.dir}/api">
      <fileset dir="${deploy.dir}/docs" includes="**/*"/>
    </copy>
  </target>

  <!-- helper target for client and devclient -->
  <target name="baseclient">
    <!-- generate the all-in-wonder jar file -->
    <taskdef resource="proguard/ant/task.properties" classpath="${deploy.dir}/lib/proguard.jar"/>
    <proguard configuration="etc/bang-client.pro"/>

    <!-- create our directories if necessary -->
    <mkdir dir="${client_dir}/code"/>
    <mkdir dir="${client_dir}/rsrc"/>
    <mkdir dir="${client_dir}/native"/>

    <!-- create our configuration jar file -->
    <jar destfile="${client_dir}/code/config.jar">
      <fileset dir="${deploy.dir}">
        <include name="deployment.properties"/>
        <include name="build.properties"/>
      </fileset>
    </jar>

    <!-- copy our various bits into the deployment directory -->
    <copy todir="${client_dir}">
      <fileset dir="projects/installers/${default_locale}">
        <include name="background.png"/>
        <include name="progress.png"/>
      </fileset>
    </copy>
    <copy todir="${client_dir}/code">
      <fileset dir="dist" includes="bang-pcode.jar"/>
      <fileset dir="dist" includes="bang-config.jar"/>
      <fileset dir="${deploy.dir}/lib" includes="lwjgl.jar"/>
      <fileset dir="${deploy.dir}/lib" includes="lwjgl_util.jar"/>
      <fileset dir="${deploy.dir}/lib" includes="commons-beanutils.jar"/>
      <fileset dir="${deploy.dir}/lib" includes="commons-digester.jar"/>
      <fileset dir="${deploy.dir}/lib" includes="commons-logging.jar"/>
    </copy>
    <copy file="projects/tools/lib/java/getdown-pro.jar"
          tofile="${client_dir}/code/getdown-pro-new.jar"/>
    <delete file="${deploy.dir}/bang-pcode.jar"/>
    <copy todir="${client_dir}/rsrc">
      <fileset dir="rsrc" includes="**/*.jar"/>
      <fileset dir="rsrc" includes="config/resource/manager.properties"/>
    </copy>
    <copy todir="${client_dir}/native">
      <fileset dir="lib/i686-Linux" includes="*.so"/>
      <fileset dir="lib/i686-Windows" includes="*.dll"/>
      <fileset dir="lib/Universal-MacOS" includes="*"/>
    </copy>

    <!-- generate the getdown digest file -->
    <taskdef name="digest" classname="com.threerings.getdown.tools.DigesterTask">
     <classpath>
       <pathelement path="${deploy.dir}/lib/samskivert.jar"/>
       <pathelement path="${deploy.dir}/lib/getdown.jar"/>
     </classpath>
    </taskdef>
    <digest appdir="${client_dir}"/>
  </target>

  <!-- builds the development client getdown distribution -->
  <target name="devclient" depends="copydistprops">
    <echo message="Generating Proguard config file for devclient..."/>
    <exec executable="${nartool.path}/configpp" output="etc/bang-client.pro">
      <arg line="etc/bang-client.pro.in"/>
      <arg line="version=0"/>
      <arg line="apply_mapping=#"/>
      <arg line="apply_file=#"/>
    </exec>

    <!-- copy the getdown.txt file into the right place -->
    <mkdir dir="${web_dir}/devclient"/>
    <copy file="etc/getdown.txt" tofile="${web_dir}/devclient/getdown.txt"
          overwrite="true" encoding="UTF-8">
      <filterset>
        <filter token="appbase_line" value="appbase = ${root_url}/devclient"/>
        <filter token="version_line" value=""/>
        <filter token="auxgroups_line" value="auxgroups = indian_post, boom_town"/>
      </filterset>
    </copy>

    <antcall target="baseclient">
      <param name="client_dir" value="${web_dir}/devclient"/>
    </antcall>
    <delete file="etc/bang-client.pro"/>

    <!-- make our Proguard mapping file accessible to Hemiptera -->
    <!--<copy file="etc/proguard/0.map" tofile="../threerings/etc/proguard/bang"/>-->

    <!-- generate some game metadata summary pages -->
    <java classpathref="classpath" failonerror="true" output="${web_dir}/units.html"
          fork="true" classname="com.threerings.bang.game.tools.PrintDamageTable">
      <arg value="indian_post"/>
    </java>
    <java classpathref="classpath" failonerror="true" output="${web_dir}/aspects.html"
          fork="true" classname="com.threerings.bang.avatar.tools.SummarizeAspects">
       <sysproperty key="no_unpack_resources" value="true"/>
       <sysproperty key="resource_dir" value="${basedir}/rsrc"/>
    </java>
    <java classpathref="classpath" failonerror="true" output="${web_dir}/aspects.html"
          fork="true" classname="com.threerings.bang.avatar.tools.SummarizeArticles">
       <sysproperty key="no_unpack_resources" value="true"/>
       <sysproperty key="resource_dir" value="${basedir}/rsrc"/>
    </java>
    <exec executable="${basedir}/bin/update_board_summary"/>
  </target>

  <!-- builds the production client getdown distribution -->
  <target name="client" depends="copydistprops">
    <exec executable="bin/getversion" outputproperty="latest_version" failonerror="true">
      <arg line="client"/>
      <arg line="${root_url}"/>
    </exec>
    <echo message="Previous version used for renaming: ${latest_version}"/>
    <echo message="Generating Proguard config file for ${version}..."/>
    <exec executable="${nartool.path}/configpp" output="etc/bang-client.pro">
      <arg line="etc/bang-client.pro.in"/>
      <arg line="version=${version}"/>
      <arg line="apply_mapping=-applymapping"/>
      <arg line="apply_file=proguard/${latest_version}.map"/>
    </exec>

    <!-- copy the getdown.txt file into the right place -->
    <mkdir dir="${web_dir}/client/${version}"/>
    <copy file="etc/getdown.txt" tofile="${web_dir}/client/${version}/getdown.txt.tmp"
          overwrite="true" encoding="UTF-8">
      <filterset>
        <filter token="appbase_line" value="appbase = ${root_url}/client/%VERSION%"/>
        <filter token="version_line" value="version = ${version}"/>
        <filter token="auxgroups_line" value="auxgroups = indian_post"/>
      </filterset>
    </copy>
    <!-- do some temporary fiddling to nix boom_town and bounties from production -->
    <exec executable="egrep" output="${web_dir}/client/${version}/getdown.txt">
      <arg line="-v"/>
      <arg line="boom_town|bounties"/>
      <arg line="${web_dir}/client/${version}/getdown.txt.tmp"/>
    </exec>
    <!-- delete the temporary file -->
    <delete file="${web_dir}/client/${version}/getdown.txt.tmp"/>

    <antcall target="baseclient">
      <param name="client_dir" value="${web_dir}/client/${version}"/>
    </antcall>
    <delete file="etc/bang-client.pro"/>
  </target>

  <!-- a target for rebuilding everything -->
  <target name="all" depends="clean,prepare,compile,javadoc,dist"/>

  <!-- rebuild all the niggling bits -->
  <target name="bits" depends="colorpos,tutorials"/>

  <!-- builds the distribution jar files -->
  <target name="dist" depends="prepare,compile">
    <!-- create the main jar file with all the code and fiddly bits -->
    <jar file="${deploy.dir}/bang-code.jar" basedir="${deploy.dir}/classes" includes="com/**"/>
    <!-- create a jar file for use by the Underwire support system -->
    <jar file="${deploy.dir}/bang-support.jar" basedir="${deploy.dir}/classes"
         includes="com/threerings/bang/server/persist/**"/>
  </target>

  <!-- builds the avatar, media and sounds jar files -->
  <target name="mdist" depends="prepare,models,sounds,bits,avatars">
    <!-- put our non-town-specific goods resources in a bundle -->
    <jar file="rsrc/goods/bundle.jar" basedir="rsrc/goods">
      <include name="cards/**/*.png"/>
      <include name="passes/**/*.png"/>
      <include name="purses/**/*.png"/>
      <include name="tickets/**/*.png"/>
      <include name="*.png"/>
      <exclude name="**/source/**"/>
    </jar>

    <!-- our top-level resources have all been copied into ${deploy.dir}/ -->
    <jar file="rsrc/bundle.jar" basedir="${deploy.dir}/classes/rsrc"/>

    <!-- collect up various configuration bits needed by the client -->
    <jar destfile="${deploy.dir}/bang-config.jar">
      <fileset dir=".">
        <include name="rsrc/**/*.txt"/>
        <include name="rsrc/**/*.properties"/>
        <include name="rsrc/**/*.bss"/>
        <include name="rsrc/**/*.css"/>
        <include name="rsrc/**/*.dat"/>
        <include name="rsrc/**/*.tmpl"/>
        <exclude name="rsrc/avatars/*/**/*.dat"/>
        <exclude name="rsrc/units/**"/>
        <exclude name="rsrc/props/**"/>
        <exclude name="rsrc/effects/**"/>
        <exclude name="rsrc/bonuses/**"/>
        <exclude name="rsrc/bounties/**"/>
        <exclude name="rsrc/extras/**"/>
      </fileset>
    </jar>

    <!-- the server can't access things in the bundle files, so we make one -->
    <!-- big file with all of our unit, prop, bonus and other properties -->
    <jar destfile="${deploy.dir}/bang-server-config.jar">
      <fileset dir=".">
        <include name="rsrc/**/*.txt"/>
        <include name="rsrc/**/*.properties"/>
        <include name="rsrc/**/*.game"/>
        <include name="rsrc/**/*.dat"/>
        <exclude name="**/model.properties"/>
      </fileset>
    </jar>
  </target>

  <!-- cleans JME which doesn't fit into our standard scheme -->
  <target name="cleanjme">
    <echo>Cleaning in jme...</echo>
    <ant dir="${project.dir}/jme" target="clean" inheritAll="false"/>
  </target>

  <!-- rebuilds JME which doesn't fit into our standard scheme -->
  <target name="distjme">
    <echo>Building in jme...</echo>
    <ant dir="${project.dir}/jme" target="dist-all" inheritAll="false"/>
    <copy todir="${deploy.dir}/lib">
      <fileset dir="${project.dir}/jme/target">
        <include name="jme.jar"/>
        <include name="jme-awt.jar"/>
        <include name="jme-effects.jar"/>
        <include name="jme-gamestates.jar"/>
        <include name="jme-model.jar"/>
        <include name="jme-scene.jar"/>
        <include name="jme-sound.jar"/>
        <include name="jme-terrain.jar"/>
      </fileset>
    </copy>
  </target>

  <!-- rebuilds all subprojects and the whole top-level distribution -->
  <target name="distall" depends="prepare,distjme,distprojects,dist,distwebapps,mdist">
    <if><equals arg1="${props.dist}" arg2="devel"/>
      <then>
        <antcall target="devclient"/>
        <ant dir="projects/installers" target="devclient"/>
      </then>
    <elseif><equals arg1="${props.dist}" arg2="production"/>
      <then>
        <antcall target="client"/>
        <ant dir="projects/installers" target="client"/>
      </then>
    </elseif></if>
  </target>

  <!-- rebuilds everything and extra bits for packaging -->
  <target name="distpkg" depends="distall,javadoc"/>

  <!-- cleans out the application and all subprojects -->
  <target name="cleanall" depends="cleanprojects,cleanwebapps,clean"/>

  <!-- fully cleans out the application and all subprojects -->
  <target name="distcleanall" depends="distcleanprojects,distcleanwebapps,cleanjme,distclean"/>

  <!-- prepare ${destroot} for all the packages being built -->
  <target name="preppkg">
    <antcallback target="prepare-server" return="pkg.base"/>
    <antcall target="prepare-server-extra"/>
    <antcall target="prepare-webapps"/>
    <antcall target="prepare-pages"/>
    <antcall target="prepare-installer-pages"/>
    <antcall target="prepare-docs"/>
  </target>

  <!-- install project specific server code into ${pkg.base} -->
  <target name="prepare-server-extra">
    <copy todir="${pkg.base}/rsrc">
      <fileset dir="rsrc">
        <include name="**/*.jar"/>
        <include name="**/*.board"/>
      </fileset>
    </copy>
    <copy file="log/README" todir="${pkg.base}/log"/>
    <copy file="build.xml" todir="${pkg.base}"/>
    <copy file="rsrc/config/resource/manager.properties"
          todir="${pkg.base}/rsrc/config/resource/"/>
    <copy file="${tools.dir}/etc/build-support.xml" todir="${pkg.base}/${tools.dir}/etc"/>
    <copy file="${tools.dir}/lib/perl/GrindUtil.pm" todir="${pkg.base}/${tools.dir}/lib/perl"/>
    <antcall target="copywithperms">
      <param name="copy.perms" value="755"/>
      <param name="copy.src"   value="${tools.dir}/bin"/>
      <param name="copy.list"  value="lfilter,filter_interesting,sum_invokers"/>
      <param name="copy.dest"  value="${pkg.base}/${tools.dir}/bin"/>
    </antcall>
    <antcall target="prepare-server-rcscript"/>
    <mkdir dir="${pkg.base}/data"/>
    <copy todir="${pkg.base}/data">
      <fileset dir="data" includes="soundtrack/*.mp3"/>
    </copy>
  </target>

  <!-- prepare the generated installer bits to be packaged -->
  <target name="prepare-installer-pages">
    <var name="pkg.name" value="${app.name}-installer-pages"/>
    <var name="destroot.pkg" value="${destroot}/${pkg.name}"/>
    <var name="pkg.base" value="${destroot.pkg}/${prefix.app}"/>
    <echo level="info">Installing ${deploy.dir}/installer-pages/ into ${destroot.pkg}...</echo>
    <antcall target="clean-dir">
      <param name="dir" value="${destroot.pkg}"/>
    </antcall>
    <copy todir="${pkg.base}/pages">
      <fileset dir="${deploy.dir}/installer-pages" includes="**"/>
    </copy>
  </target>

</project>
