<!-- build configuration -->
<project name="bang" default="compile" basedir=".">

  <!-- define some basic project parameters -->
  <property name="app.name"         value="bang"/>
  <property name="doc.packages"     value="com.threerings.bang.*"/>
  <property name="copy.holder"      value="Three Rings Design, Inc."/>

  <!-- read in our deployment properties -->
  <property file="deployment.properties"/>

  <!-- things you probably don't want to change -->
  <property name="src.dir"      value="src/java"/>
  <property name="deploy.dir"   value="dist"/>
  <property name="dist.jar"     value="${app.name}.jar"/>
  <property name="javadoc.dir"  value="${deploy.dir}/docs"/>

  <!-- declare our classpath -->
  <path id="classpath">
    <fileset dir="lib" includes="**/*.jar"/>
    <pathelement location="${deploy.dir}/classes"/>
  </path>

  <!-- generates additional methods for distributed object classes -->
  <target name="gendobj" depends="prepare">
    <taskdef name="dobj"
             classname="com.threerings.presents.tools.GenDObjectTask"
             classpathref="classpath"/>
    <!-- make sure the dobject class files are all compiled -->
    <javac srcdir="src/java" destdir="${deploy.dir}/classes"
           debug="on" optimize="${build.optimize}" deprecation="on">
      <classpath refid="classpath"/>
      <include name="**/*Object.java"/>
    </javac>
    <!-- now generate the associated files -->
    <dobj classpathref="classpath">
      <fileset dir="src/java" includes="**/*Object.java"/>
    </dobj>
  </target>

  <!-- generates marshaller and dispatcher classes for all invocation -->
  <!-- service declarations -->
  <target name="genservice"> 
    <taskdef name="service"
             classname="com.threerings.presents.tools.GenServiceTask"
             classpathref="classpath"/>
    <!-- make sure the service class files are all compiled -->
    <javac srcdir="src/java" destdir="${deploy.dir}/classes"
           debug="on" optimize="${build.optimize}" deprecation="on">
      <classpath refid="classpath"/>
      <include name="**/*Service.java"/>
    </javac>
    <!-- now generate the associated files -->
    <service header="lib/SOURCE_HEADER" classpathref="classpath">
      <fileset dir="src/java" includes="**/*Service.java"/>
    </service>
  </target>

  <!-- prepares the application directories -->
  <target name="prepare">
    <mkdir dir="${deploy.dir}"/>
    <mkdir dir="${deploy.dir}/classes"/>
    <mkdir dir="${deploy.dir}/classes/rsrc"/>
    <mkdir dir="${javadoc.dir}"/>
    <copy todir="${deploy.dir}/classes">
      <fileset dir="${src.dir}" includes="**/*.properties"/>
    </copy>
    <copy todir="${deploy.dir}/classes/rsrc">
      <fileset dir="rsrc" includes="**/*"/>
    </copy>
  </target>

  <!-- converts our models into JME format -->
  <target name="models">
    <taskdef name="convert" classname="com.threerings.jme.tools.ConvertModelTask"
             classpathref="classpath"/>
    <convert>
      <fileset dir="rsrc" includes="**/*.MD3"/>
      <fileset dir="rsrc" includes="**/*.obj"/>
      <fileset dir="rsrc" includes="**/*.3DS"/>
      <fileset dir="rsrc" includes="**/*.ASE"/>
    </convert>
  </target>

  <!-- cleans out the installed application -->
  <target name="clean">
    <delete dir="${deploy.dir}"/>
  </target>

  <!-- build the java class files -->
  <target name="compile" depends="prepare">
    <javac srcdir="${src.dir}" destdir="${deploy.dir}/classes"
           debug="on" optimize="off" deprecation="on">
      <classpath refid="classpath"/>
      <compilerarg value="-Xlint:unchecked"/>
    </javac>
  </target>

  <!-- build the javadoc documentation -->
  <target name="javadoc" depends="prepare">
    <javadoc sourcepath="${src.dir}"
             packagenames="${doc.packages}"
             windowtitle="${app.name} API"
             doctitle="${app.name} API"
             bottom="Copyright &#169; 2005 ${copy.holder}. All Rights Reserved."
             destdir="${javadoc.dir}"
             additionalparam="-breakiterator">
      <classpath refid="classpath"/>
      <link href="http://java.sun.com/j2se/1.5/docs/api/"/>
    </javadoc>
  </target>

  <!-- builds the standalone editor jar -->
  <target name="editor">
    <!-- generate the all-in-wonder jar file -->
    <taskdef resource="proguard/ant/task.properties"
             classpath="lib/proguard.jar"/>
    <proguard configuration="etc/bang-editor.pro"/>
    <copy todir="pages/editor" file="dist/bang-editor.jar"/>

    <!-- create the JNLP file -->
    <copy todir="pages/editor">
      <fileset dir="etc" includes="editor.jnlp"/>
      <filterset>
        <filter token="application_uri" value="${root_url}/editor/"/>
      </filterset>
    </copy>

    <!-- sign the jar file -->
    <signjar keystore="${sign.keystore}" alias="${sign.alias}"
      storepass="${sign.storepass}" lazy="true">
      <fileset dir="pages/editor" includes="bang-editor.jar"/>
    </signjar>
  </target>

  <!-- builds the client getdown distribution -->
  <target name="client" depends="dist">
    <!-- generate the all-in-wonder jar file -->
    <taskdef resource="proguard/ant/task.properties"
             classpath="lib/proguard.jar"/>
    <proguard configuration="etc/bang-client.pro"/>

    <!-- copy our various bits into the deployment directory -->
    <copy todir="pages/client/code">
      <fileset dir="dist" includes="bang-client.jar"/>
      <fileset dir="lib" includes="lwjgl.jar"/>
    </copy>
    <copy todir="pages/client/native">
      <fileset dir="lib/i686-Linux" includes="*.so"/>
      <fileset dir="lib/i686-Windows" includes="*.dll"/>
      <fileset dir="lib/PowerPC-MacOS" includes="*"/>
    </copy>

    <!-- copy the getdown.txt file into the right place -->
    <copy todir="pages/client" overwrite="true" encoding="UTF-8">
      <fileset dir="etc" includes="getdown.txt"/>
      <filterset>
        <filter token="app_root" value="${root_url}"/>
        <filter token="server_host" value="${server_host}"/>
        <filter token="server_port" value="${server_port}"/>
      </filterset>
    </copy>

    <!-- generate the getdown digest file -->
    <taskdef name="digest"
      classname="com.threerings.getdown.tools.DigesterTask">
     <classpath>
       <pathelement path="lib/samskivert.jar"/>
       <pathelement path="lib/getdown.jar"/>
     </classpath>
    </taskdef>
    <digest appdir="pages/client"/>
  </target>

  <!-- a target for rebuilding everything -->
  <target name="all" depends="clean,prepare,compile,javadoc,dist"/>

  <!-- builds the main bang jar file -->
  <target name="dist" depends="prepare,compile">
    <jar file="${deploy.dir}/${dist.jar}"
         basedir="${deploy.dir}/classes"/>
  </target>

</project>
