<!-- build configuration -->
<project name="bang" default="compile" basedir=".">

  <!-- read in our deployment properties -->
  <property file="deployment.properties"/>
  <property file="build.properties"/>

  <!-- things you probably don't want to change -->
  <property name="src.dir"      value="src/java"/>
  <property name="deploy.dir"   value="dist"/>
  <property name="javadoc.dir"  value="${deploy.dir}/docs"/>
  <property name="savedoc.dir"  value="docs"/>
  <property name="nartool.path"   value="projects/narya/bin"/>

  <!-- define our subprojects and include the standard build system -->
  <property name="libs.dir"      value="projects/tools/lib/java"/>
  <property name="projects.root" value="."/>
  <property name="projects"      value="samskivert,narya,nenya,vilya,jme-bui,threerings"/>
  <import file="${projects.root}/projects/tools/etc/build-support.xml"/>

  <!-- declare the libraries needed by the Bang runtime -->
  <fileset dir="${projects.root}" id="dist.libs">
    <include name="${libs.dir}/commons-beanutils.jar"/>
    <include name="${libs.dir}/commons-collections.jar"/>
    <include name="${libs.dir}/commons-digester.jar"/>
    <include name="${libs.dir}/commons-io.jar"/>
    <include name="${libs.dir}/commons-lang.jar"/>
    <include name="${libs.dir}/commons-logging.jar"/>
    <include name="${libs.dir}/getdown.jar"/>
    <include name="${libs.dir}/junit-3.7.jar"/>
    <include name="${libs.dir}/mysql-connector-java-3.1.12-bin.jar"/>
    <include name="${libs.dir}/servlet-2.3.jar"/>
    <include name="${libs.dir}/velocity-1.5-dev.jar"/>
    <include name="${project.dir}/narya/dist/narya-tools.jar"/>
    <include name="lib/lwjgl.jar"/>
    <include name="lib/lwjgl_util.jar"/>
    <include name="lib/jme.jar"/>
    <include name="lib/jme-awt.jar"/>
    <include name="lib/jme-effects.jar"/>
    <include name="lib/jme-gamestates.jar"/>
    <include name="lib/jme-model.jar"/>
    <include name="lib/jme-sound.jar"/>
    <include name="lib/jme-sound.jar"/>
    <include name="lib/jme-terrain.jar"/>
    <include name="lib/hemiptera.jar"/>
  </fileset>

  <!-- declare our classpath -->
  <path id="classpath">
    <pathelement location="${deploy.dir}/classes"/>
    <fileset dir="${deploy.dir}/lib" includes="**/*.jar"/>
    <fileset dir="${deploy.dir}" includes="bang-code.jar"/>
  </path>

  <!-- generates additional methods for distributed object classes -->
  <target name="gendobj" depends="prepare,copydistlibs">
    <taskdef name="dobj"
             classname="com.threerings.presents.tools.GenDObjectTask"
             classpathref="classpath"/>
    <!-- make sure the dobject class files are all compiled -->
    <javac srcdir="src/java" destdir="${deploy.dir}/classes"
           debug="on" optimize="${build.optimize}" deprecation="on">
      <classpath refid="classpath"/>
      <include name="**/*Object.java"/>
    </javac>
    <!-- now generate the associated files -->
    <dobj classpathref="classpath">
      <fileset dir="src/java" includes="**/*Object.java"/>
    </dobj>
  </target>

  <!-- generates marshaller and dispatcher classes for all invocation -->
  <!-- service declarations -->
  <target name="genservice" depends="prepare,copydistlibs">
    <taskdef name="service"
             classname="com.threerings.presents.tools.GenServiceTask"
             classpathref="classpath"/>
    <!-- make sure the service class files are all compiled -->
    <javac srcdir="src/java" destdir="${deploy.dir}/classes"
           debug="on" optimize="${build.optimize}" deprecation="on">
      <classpath refid="classpath"/>
      <include name="**/*Service.java"/>
    </javac>
    <!-- now generate the associated files -->
    <service header="lib/SOURCE_HEADER" classpathref="classpath">
      <fileset dir="src/java" includes="**/*Service.java"/>
    </service>
  </target>

  <!-- generates sender and decoder classes for all invocation -->
  <!-- receiver declarations -->
  <target name="genreceiver" depends="prepare,copydistlibs">
    <taskdef name="receiver"
             classname="com.threerings.presents.tools.GenReceiverTask"
             classpathref="classpath"/>
    <!-- make sure the receiver class files are all compiled -->
    <javac srcdir="src/java" destdir="${deploy.dir}/classes"
           debug="on" optimize="${build.optimize}" deprecation="on">
      <classpath refid="classpath"/>
      <include name="**/*Receiver.java"/>
      <exclude name="**/InvocationReceiver.java"/>
    </javac>
    <!-- now generate the associated files -->
    <receiver header="lib/SOURCE_HEADER" classpathref="classpath">
      <fileset dir="src/java" includes="**/*Receiver.java"
        excludes="**/InvocationReceiver.java"/>
    </receiver>
  </target>

  <!-- prepares the application directories -->
  <target name="prepare" depends="lists">
    <mkdir dir="${deploy.dir}"/>
    <mkdir dir="${deploy.dir}/classes"/>
    <mkdir dir="${deploy.dir}/classes/rsrc"/>
    <mkdir dir="${javadoc.dir}"/>
    <copy todir="${deploy.dir}/classes/rsrc">
      <fileset dir="rsrc">
       <include name="**/*"/>
       <exclude name="units/**"/>
       <exclude name="props/**"/>
       <exclude name="effects/**"/>
       <exclude name="extras/**"/>
       <exclude name="bonuses/**"/>
       <exclude name="boards/**"/>
       <exclude name="avatars/**"/>
       <exclude name="goods/**"/>
       <exclude name="sounds/**"/>
       <exclude name="tutorials/**/*.xml"/>
       <exclude name="config/**/*.xml"/>
       <exclude name="**/*.properties"/>
       <exclude name="**/*.bss"/>
       <exclude name="**/*.css"/>
       <exclude name="**/*.txt"/>
       <exclude name="**/*.jar"/>
       <exclude name="**/*.dat"/>
       <exclude name="**/*.wav"/>
       <exclude name="**/source/**"/>
      </fileset>
    </copy>
  </target>

  <!-- encodes our sounds to ogg and enumerates them into a master list -->
  <target name="sounds">
    <exec executable="bin/encode_sounds"/> 
    <exec executable="find" output="rsrc/sounds.txt">
      <arg value="rsrc"/>
      <arg value="-name"/>
      <arg value="*.ogg"/>
      <arg value="!"/>
      <arg value="-path"/>
      <arg value="rsrc/sounds/music/*"/>
    </exec>
    <jar file="rsrc/sounds/effects/bundle.jar" basedir="rsrc/sounds/effects">
      <include name="**/*.ogg"/>
      <exclude name="**/source/**"/>
    </jar>
    <jar file="rsrc/sounds/feedback/bundle.jar" basedir="rsrc/sounds/feedback">
      <include name="**/*.ogg"/>
      <exclude name="**/source/**"/>
    </jar>
  </target>

  <!-- enumerates all of our units, props, etc. into master lists -->
  <target name="lists">
    <exec executable="bin/update_lists"/>
  </target>

  <!-- builds bundles for a specific town -->
  <target name="town_bundles">
    <jar file="rsrc/units/${town}/bundle.jar" basedir="rsrc/units/${town}">
      <include name="units.txt"/>
      <include name="**/unit.properties"/>
      <include name="**/*.png"/>
      <include name="**/model.dat"/>
      <include name="**/*.ogg"/>
      <exclude name="**/source/**"/>
    </jar>
    <jar file="rsrc/props/${town}/bundle.jar" basedir="rsrc/props/${town}">
      <include name="props.txt"/>
      <include name="**/prop.properties"/>
      <include name="**/*.png"/>
      <include name="**/model.dat"/>
      <include name="**/*.ogg"/>
      <exclude name="**/source/**"/>
    </jar>
    <jar file="rsrc/bonuses/${town}/bundle.jar" basedir="rsrc/bonuses/${town}">
      <include name="bonuses.txt"/>
      <include name="**/bonus.properties"/>
      <include name="**/*.png"/>
      <include name="**/model.dat"/>
      <include name="**/*.ogg"/>
      <exclude name="**/source/**"/>
    </jar>
    <jar file="rsrc/effects/${town}/bundle.jar" basedir="rsrc/effects/${town}">
      <include name="**/particles.txt"/>
      <include name="**/particles.properties"/>
      <include name="**/particles.jme"/>
      <include name="**/icons.txt"/>
      <include name="**/icon.properties"/>
      <include name="**/*.png"/>
      <include name="**/*.ogg"/>
      <exclude name="**/source/**"/>
    </jar>
    <jar file="rsrc/extras/${town}/bundle.jar" basedir="rsrc/extras/${town}">
      <include name="**/*.png"/>
      <include name="**/model.dat"/>
      <include name="**/*.ogg"/>
      <exclude name="**/source/**"/>
    </jar>
    <jar file="rsrc/goods/${town}/bundle.jar" basedir="rsrc/goods/${town}">
      <include name="**/*.png"/>
      <exclude name="**/source/**"/>
    </jar>
    <jar file="rsrc/sounds/music/${town}/bundle.jar" basedir="rsrc/sounds/music/${town}">
      <include name="**/*.ogg"/>
      <exclude name="**/source/**"/>
    </jar>
  </target>

  <!-- compiles our models -->
  <target name="models">
    <taskdef name="compile" classpathref="classpath"
             classname="com.threerings.jme.tools.CompileModelTask"/>
    <compile>
      <fileset dir="rsrc" includes="**/model.properties"/>
    </compile>
    <taskdef name="updatepropheight" classpathref="classpath"
             classname="com.threerings.bang.tools.UpdatePropHeightTask"/>
    <updatepropheight>
      <fileset dir="rsrc" includes="**/prop.properties"/>
    </updatepropheight>
    <jar file="rsrc/units/wreckage/bundle.jar" basedir="rsrc/units/wreckage">
      <include name="**/*.png"/>
      <include name="**/model.dat"/>
      <include name="**/*.ogg"/>
      <exclude name="**/source/**"/>
    </jar>
    <antcall target="town_bundles">
      <param name="town" value="frontier_town"/>
    </antcall>
    <antcall target="town_bundles">
      <param name="town" value="indian_post"/>
    </antcall>
  </target>

  <!-- loads our boards into the database -->
  <target name="boards">
    <taskdef name="loadboard"
      classname="com.threerings.bang.tools.LoadBoardTask"
      classpathref="classpath"/>
    <loadboard home=".">
      <fileset dir="rsrc/boards" includes="**/*.board"/>
    </loadboard>
  </target>

  <!-- compiles our tutorial XML definitions -->
  <target name="tutorials">
    <taskdef name="confcomp" classpathref="classpath"
      classname="com.threerings.tools.CompiledConfigTask"/>
    <confcomp parser="com.threerings.bang.game.tools.xml.TutorialConfigParser">
      <fileset dir="rsrc/tutorials" includes="**/*.xml"/>
    </confcomp>
  </target>

  <!-- creates the serialized color repository config -->
  <target name="colorpos">
    <taskdef name="confcomp" classpathref="classpath"
      classname="com.threerings.tools.CompiledConfigTask"/>
    <confcomp parser="com.threerings.media.image.tools.xml.ColorPositoryParser"
      configdef="rsrc/config/media/colordefs.xml"/>
  </target>

  <!-- creates the serialized article and aspect catalogs -->
  <target name="catalogs">
    <taskdef name="confcomp" classpathref="classpath"
      classname="com.threerings.tools.CompiledConfigTask"/>
    <confcomp configdef="rsrc/avatars/articles.xml"
      parser="com.threerings.bang.avatar.tools.xml.ArticleCatalogParser"/>
    <confcomp configdef="rsrc/avatars/aspects.xml"
      parser="com.threerings.bang.avatar.tools.xml.AspectCatalogParser"/>
  </target>

  <!-- builds the avatar component bundles -->
  <target name="avatars" depends="catalogs">
    <taskdef name="metabundle" classpathref="classpath"
      classname="com.threerings.cast.bundle.tools.MetadataBundlerTask"/>
    <metabundle actiondef="rsrc/avatars/actions.xml"
      classdef="rsrc/avatars/classes.xml" target="rsrc/avatars/metadata.jar"/>
    <ant target="bundles" dir="rsrc/avatars" antfile="build.xml"/>
  </target>

  <!-- run the unit tests -->
  <target name="tests" depends="compile" description="Runs unit tests.">
    <taskdef name="unit" classpathref="classpath"
      classname="org.apache.tools.ant.taskdefs.optional.junit.JUnitTask"/>
    <unit printsummary="no" haltonfailure="yes" fork="true">
      <classpath refid="classpath"/>
      <formatter type="brief" usefile="false"/>
      <batchtest>
        <fileset dir="${src.dir}" includes="**/*UnitTest.java"/>
      </batchtest>
    </unit>
  </target>

  <!-- cleans out the compiled code -->
  <target name="clean">
    <delete dir="${deploy.dir}/classes/com"/>
  </target>

  <!-- fully cleans out the installed application -->
  <target name="distclean">
    <delete dir="${deploy.dir}"/>
    <delete><fileset dir="rsrc" includes="**/model.dat"/></delete>
    <delete><fileset dir="rsrc" includes="**/*.jar"/></delete>
  </target>

  <!-- build the java class files -->
  <target name="compile" depends="prepare,copydistlibs">
    <javac srcdir="${src.dir}" destdir="${deploy.dir}/classes"
           debug="on" optimize="off" deprecation="on">
      <classpath refid="classpath"/>
      <compilerarg value="-Xlint:unchecked"/>
    </javac>
  </target>

  <!-- build the javadoc documentation -->
  <target name="javadoc" depends="prepare">
    <property name="copy.holder" value="Three Rings Design, Inc."/>
    <javadoc sourcepath="${src.dir}"
             packagenames="com.threerings.bang.*"
             windowtitle="Bang! Howdy API"
             doctitle="Bang! Howdy API"
             bottom="Copyright &#169; 2006 ${copy.holder}. All Rights Reserved."
             destdir="${javadoc.dir}"
             additionalparam="-breakiterator">
      <classpath refid="classpath"/>
      <link href="http://build.earth.threerings.net/docs/java/java1.5/"/>
    </javadoc>
  </target>

  <!-- builds the javadocs and stuffs them in a directory where they -->
  <!-- won't be blown away when we do "clean" next time -->
  <target name="savedoc" depends="javadoc">
    <delete dir="${savedoc.dir}/api"/>
    <copy todir="${savedoc.dir}/api">
      <fileset dir="${javadoc.dir}" includes="**/*"/>
    </copy>
  </target>

  <!-- helper target for client and devclient -->
  <target name="baseclient" depends="dist,mdist">
    <!-- generate the all-in-wonder jar file -->
    <taskdef resource="proguard/ant/task.properties"
             classpath="lib/proguard.jar"/>
    <proguard configuration="etc/bang-client.pro"/>

    <!-- create our directories if necessary -->
    <mkdir dir="${client_dir}"/>
    <mkdir dir="${client_dir}/code"/>
    <mkdir dir="${client_dir}/rsrc"/>
    <mkdir dir="${client_dir}/native"/>

    <!-- create our configuration jar file -->
    <jar destfile="${client_dir}/code/config.jar">
      <fileset dir=".">
        <include name="deployment.properties"/>
        <include name="build.properties"/>
      </fileset>
    </jar>

    <!-- copy our various bits into the deployment directory -->
    <copy todir="${client_dir}">
      <fileset dir="projects/installers/${default_locale}">
        <include name="background.png"/>
        <include name="progress.png"/>
      </fileset>
    </copy>
    <copy todir="${client_dir}/code">
      <fileset dir="dist" includes="bang-pcode.jar"/>
      <fileset dir="dist" includes="bang-config.jar"/>
      <fileset dir="lib" includes="lwjgl.jar"/>
      <fileset dir="lib" includes="lwjgl_util.jar"/>
      <fileset dir="lib" includes="commons-beanutils.jar"/>
      <fileset dir="lib" includes="commons-digester.jar"/>
      <fileset dir="lib" includes="commons-logging.jar"/>
    </copy>
    <copy file="/export/tools/lib/java/getdown-pro.jar"
          tofile="${client_dir}/code/getdown-pro-new.jar"/>
    <delete file="dist/bang-pcode.jar"/>
    <copy todir="${client_dir}/rsrc">
      <fileset dir="rsrc" includes="**/*.jar"/>
      <fileset dir="rsrc" includes="config/resource/manager.properties"/>
    </copy>
    <copy todir="${client_dir}/native">
      <fileset dir="lib/i686-Linux" includes="*.so"/>
      <fileset dir="lib/i686-Windows" includes="*.dll"/>
      <fileset dir="lib/Universal-MacOS" includes="*"/>
    </copy>

    <!-- copy the getdown.txt file into the right place -->
    <copy todir="${client_dir}" overwrite="true" encoding="UTF-8">
      <fileset dir="etc" includes="getdown.txt"/>
      <filterset>
        <filter token="appbase_line" value="${appbase_line}"/>
        <filter token="version_line" value="${version_line}"/>
      </filterset>
    </copy>

    <!-- generate the getdown digest file -->
    <taskdef name="digest"
      classname="com.threerings.getdown.tools.DigesterTask">
     <classpath>
       <pathelement path="lib/samskivert.jar"/>
       <pathelement path="lib/getdown.jar"/>
     </classpath>
    </taskdef>
    <digest appdir="${client_dir}"/>
  </target>

  <!-- builds the development client getdown distribution -->
  <target name="devclient">
    <echo message="Generating Proguard config file for devclient..."/>
    <exec executable="${nartool.path}/configpp" output="etc/bang-client.pro">
      <arg line="etc/bang-client.pro.in"/>
      <arg line="version=0"/>
      <arg line="apply_mapping=#"/>
      <arg line="apply_file=#"/>
    </exec>

    <antcall target="baseclient">
      <param name="client" value="devclient"/>
      <param name="client_dir" value="${web_dir}/devclient"/>
      <param name="appbase_line" value="appbase = ${root_url}/devclient"/>
      <param name="version_line" value=""/>
    </antcall>
    <delete file="etc/bang-client.pro"/>
  </target>

  <!-- builds the production client getdown distribution -->
  <target name="client">
    <exec executable="bin/getversion" outputproperty="latest_version"
          failonerror="true">
      <arg line="client"/>
      <arg line="${root_url}"/>
    </exec>
    <echo message="Previous version used for renaming: ${latest_version}"/>
    <echo message="Generating Proguard config file for ${version}..."/>
    <exec executable="${nartool.path}/configpp" output="etc/bang-client.pro">
      <arg line="etc/bang-client.pro.in"/>
      <arg line="version=${version}"/>
      <arg line="apply_mapping=-applymapping"/>
      <arg line="apply_file=proguard/${latest_version}.map"/>
    </exec>

    <antcall target="baseclient">
      <param name="client" value="client"/>
      <param name="client_dir" value="${web_dir}/client/${version}"/>
      <param name="appbase_line"
             value="appbase = ${root_url}/client/%VERSION%"/>
      <param name="version_line" value="version = ${version}"/>
    </antcall>
    <delete file="etc/bang-client.pro"/>
  </target>

  <!-- a target for rebuilding everything -->
  <target name="all" depends="clean,prepare,compile,javadoc,dist"/>

  <!-- rebuild all the niggling bits -->
  <target name="bits" depends="colorpos,tutorials"/>

  <!-- builds the distribution jar files -->
  <target name="dist" depends="prepare,compile">
    <jar file="${deploy.dir}/bang-code.jar"
         basedir="${deploy.dir}/classes" includes="com/**"/>
  </target>

  <!-- builds the avatar, media and sounds jar files -->
  <target name="mdist" depends="prepare,models,sounds,bits,avatars">
    <!-- put our non-town-specific goods resources in a bundle -->
    <jar file="rsrc/goods/bundle.jar" basedir="rsrc/goods">
      <include name="cards/**/*.png"/>
      <include name="passes/**/*.png"/>
      <include name="purses/**/*.png"/>
      <include name="tickets/**/*.png"/>
      <exclude name="**/source/**"/>
    </jar>

    <!-- our top-level resources have all been copied into dist/ -->
    <jar file="rsrc/bundle.jar" basedir="${deploy.dir}/classes/rsrc"/>

    <!-- collect up various configuration bits needed by the client -->
    <jar destfile="${deploy.dir}/bang-config.jar">
      <fileset dir=".">
        <include name="rsrc/**/*.txt"/>
        <include name="rsrc/**/*.properties"/>
        <include name="rsrc/**/*.bss"/>
        <include name="rsrc/**/*.css"/>
        <include name="rsrc/**/*.dat"/>
        <include name="rsrc/**/*.tmpl"/>
        <exclude name="rsrc/avatars/*/**/*.dat"/>
        <exclude name="rsrc/units/**"/>
        <exclude name="rsrc/props/**"/>
        <exclude name="rsrc/effects/**"/>
        <exclude name="rsrc/bonuses/**"/>
        <exclude name="rsrc/extras/**"/>
      </fileset>
    </jar>

    <!-- the server can't access things in the bundle files, so we make one -->
    <!-- big file with all of our bunt, prop, bonus and other properties -->
    <jar destfile="${deploy.dir}/bang-server-config.jar">
      <fileset dir=".">
        <include name="rsrc/**/*.txt"/>
        <include name="rsrc/**/*.properties"/>
        <include name="rsrc/**/*.dat"/>
        <exclude name="**/model.properties"/>
      </fileset>
    </jar>
  </target>

  <!-- rebuilds all subprojects and the whole top-level distribution -->
  <target name="distall" depends="distprojects,dist,mdist"/>

  <!-- fully cleans out the installed application and all subprojects -->
  <target name="cleanall" depends="distclean,cleanprojects"/>

</project>
