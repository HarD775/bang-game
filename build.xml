<!-- build configuration -->
<project name="bang" default="compile" basedir="." xmlns:artifact="urn:maven-artifact-ant">

  <!-- define various build properties -->
  <property name="src.dir"        value="src/java"/>
  <property name="deploy.dir"     value="dist"/>
  <property name="var.dir"        value="var"/>
  <property name="app.name"       value="bang"/>
  <property name="extlibs.dir"    value="extlibs/java"/>
  <property name="javadoc.title"  value="Bang! Howdy API"/>
  <property name="build.optimize" value="on"/>
  <property name="nartool.path"   value="${basedir}/projects/narya/bin"/>
  <property name="towns"          value="frontier_town,indian_post,boom_town"/>

  <!-- define our subprojects and include the standard build system -->
  <property name="projects" value="samskivert,jme-bui,narya,nenya,vilya,threerings"/>
  <property name="webapps" value="office"/>
  <!-- jetty needs to import server.conf, not bang.conf which is the default -->
  <property name="jetty.app.conf" value="server.conf"/>
  <import file="build/etc/build-support.xml"/>

  <!-- override the fileset for the checkclean target to ignore ${var.dir} -->
  <fileset id="checkclean.fileset" dir="${basedir}">
    <exclude name="${var.dir}/**"/>
  </fileset>

  <!-- force the hemiptera-map package to install in production even if building testing -->
  <if><equals arg1="${props.dist}" arg2="test"/><then>
    <property name="${app.name}-hemiptera-map.apt.dist" value="${production.apt.dist}"/>
  </then></if>

  <!-- declare the properties files. -->
  <property name="props.list" value="server.properties,deployment.properties"/>

  <!-- declare the files from bin needed in the package -->
  <property name="bin.list1"  value="bangjava,bangserver,bangtool,mysql,process_stats"/>
  <property name="bin.list2"  value="roll_logs,runbang,summarize_perf,summarize_stats"/>
  <property name="bin.list3"  value="grind_bounties,bang,bangrespawn"/>
  <property name="bin.list"   value="${bin.list1},${bin.list2},${bin.list3}"/>

  <!-- declare the files that will be deployed to the maven repository -->
  <filelist dir="." id="deploy.filelist">
    <file name="${deploy.dir}/bang-support.jar"/>
  </filelist>

  <!-- declare the libraries needed by the Bang runtime -->
  <filelist dir="." id="dist.libs">
    <file name="${extlibs.dir}/ant.jar"/>
    <file name="${extlibs.dir}/commons-beanutils.jar"/>
    <file name="${extlibs.dir}/commons-codec.jar"/>
    <file name="${extlibs.dir}/commons-collections.jar"/>
    <file name="${extlibs.dir}/commons-digester.jar"/>
    <file name="${extlibs.dir}/commons-httpclient.jar"/>
    <file name="${extlibs.dir}/commons-io.jar"/>
    <file name="${extlibs.dir}/commons-lang.jar"/>
    <file name="${extlibs.dir}/commons-logging.jar"/>
    <file name="${extlibs.dir}/getdown.jar"/>
    <file name="${extlibs.dir}/gwt-user.jar"/>
    <file name="${extlibs.dir}/jarbundler-1.2.jar"/>
    <file name="${extlibs.dir}/javassist.jar"/>
    <file name="${extlibs.dir}/junit-3.7.jar"/>
    <file name="${extlibs.dir}/mail.jar"/>
    <file name="${extlibs.dir}/mysql-connector-java.jar"/>
    <file name="${extlibs.dir}/proguard.jar"/>
    <file name="${extlibs.dir}/s3lib.jar"/>
    <file name="${extlibs.dir}/s3upload.jar"/>
    <file name="${extlibs.dir}/servlet-2.3.jar"/>
    <file name="${extlibs.dir}/velocity-1.5-dev.jar"/>
    <file name="lib/lwjgl.jar"/>
    <file name="lib/lwjgl_util.jar"/>
    <file name="lib/jorbis-0.0.12.jar"/>
    <file name="lib/jogg-0.0.5.jar"/>
    <file name="lib/jl1.0.jar"/>
  </filelist>

  <!-- declare the libraries in dist.libs needed only at build time and are not to be packaged. -->
  <property name="build.only.libs" value="ant.jar,proguard.jar,s3lib.jar,s3upload.jar"/>

  <!-- declare our classpath -->
  <path id="classpath">
    <pathelement location="${deploy.dir}/classes"/>
    <fileset dir="${deploy.dir}/lib" includes="**/*.jar"/>
    <fileset dir="${deploy.dir}" includes="bang-code.jar"/>
  </path>

  <!-- declare a classpath for tool tasks -->
  <path id="tool.classpath">
    <pathelement location="${deploy.dir}"/>
    <fileset dir="${deploy.dir}/lib" includes="**/*.jar"/>
    <fileset dir="${deploy.dir}" includes="bang-code.jar"/>
    <fileset dir="${deploy.dir}" includes="bang-server-config.jar"/>
  </path>

  <!-- prepares the application directories -->
  <target name="prepare" depends="copydistlibs,copydistprops,lists">
    <mkdir dir="${deploy.dir}"/>
    <mkdir dir="${deploy.dir}/tmp"/>
    <mkdir dir="${deploy.dir}/lib"/>
    <mkdir dir="${deploy.dir}/classes"/>
    <mkdir dir="${deploy.dir}/rsrc"/>

    <!-- Fetch dependencies -->
    <artifact:dependencies filesetId="dependency.fileset">
      <remoteRepository refid="maven.depends.repo"/>
      <dependency groupId="com.threerings.underwire.${maven.dist}" artifactId="underwire"
                  version="0.0-SNAPSHOT"/>
      <dependency groupId="com.threerings.hemiptera.${maven.dist}" artifactId="hemiptera"
                  version="0.0-SNAPSHOT"/>
    </artifact:dependencies>
    <copy todir="${deploy.dir}/lib">
      <fileset refid="dependency.fileset"/>
      <mapper type="flatten"/>
    </copy>

    <!-- copy global static resources -->
    <copy todir="${deploy.dir}/rsrc">
      <fileset dir="rsrc">
       <include name="**/*"/>
       <exclude name="avatars/**"/>
       <exclude name="boards/**"/>
       <exclude name="bonuses/**"/>
       <exclude name="bounties/**"/>
       <exclude name="cards/**"/>
       <exclude name="config/**/*.xml"/>
       <exclude name="effects/**"/>
       <exclude name="extras/**"/>
       <exclude name="goods/**"/>
       <exclude name="props/**"/>
       <exclude name="sounds/**"/>
       <exclude name="tutorials/**/*.xml"/>
       <exclude name="units/**"/>
       <exclude name="**/*.wav"/>
       <exclude name="**/source/**"/>
      </fileset>
    </copy>

    <!-- copy global static resources -->
    <copy todir="${deploy.dir}/rsrc/goods">
      <fileset dir="rsrc/goods">
        <include name="cards/**/*.png"/>
        <include name="gold/**/*.png"/>
        <include name="passes/**/*.png"/>
        <include name="purses/**/*.png"/>
        <include name="tickets/**/*.png"/>
        <include name="upgrades/**/*.png"/>
        <include name="*.png"/>
        <exclude name="**/source/**"/>
      </fileset>
    </copy>

    <!-- copy some per-town static resources -->
    <for list="${towns}" param="town"><sequential>
      <mkdir dir="${deploy.dir}/rsrc/goods/@{town}"/>
      <copy todir="${deploy.dir}/rsrc/goods/@{town}">
        <fileset dir="rsrc/goods/@{town}">
          <include name="**/*.png"/>
          <exclude name="**/source/**"/>
        </fileset>
      </copy>

      <copy todir="${deploy.dir}/rsrc/cards/@{town}">
        <fileset dir="rsrc/cards/@{town}">
          <include name="**/*.png"/>
          <exclude name="**/source/**"/>
        </fileset>
      </copy>

      <copy todir="${deploy.dir}/rsrc/bounties/@{town}">
        <fileset dir="rsrc/bounties/@{town}">
          <include name="**/bounties.txt"/>
          <include name="**/*.png"/>
          <include name="**/*.game"/>
          <include name="**/*.properties"/>
          <exclude name="**/source/**"/>
        </fileset>
      </copy>
    </sequential></for>

    <copy file="rsrc/config/resource/manager.properties"
          tofile="${deploy.dir}/rsrc/config/resource/manager.properties"/>
  </target>

  <!-- generates fields for persistent record classes -->
  <target name="genrecord" depends="prepare">
    <taskdef name="grecord" classname="com.samskivert.jdbc.depot.tools.GenRecordTask"
             classpathref="classpath"/>
    <!-- make sure the record class files are all compiled -->
    <javac srcdir="${src.dir}" destdir="${deploy.dir}/classes"
           debug="on" optimize="${build.optimize}" deprecation="on">
      <classpath refid="classpath"/>
      <include name="**/*Record.java"/>
    </javac>
    <!-- now update the source files -->
    <grecord classpathref="classpath">
      <fileset dir="${src.dir}" includes="**/*Record.java"/>
    </grecord>
  </target>

  <!-- generates additional methods for distributed object classes -->
  <target name="gendobj" depends="prepare">
    <taskdef name="dobj" classpathref="tool.classpath"
             classname="com.threerings.presents.tools.GenDObjectTask"/>
    <!-- make sure the dobject class files are all compiled -->
    <javac srcdir="${src.dir}" destdir="${deploy.dir}/classes" includeAntRuntime="false"
           debug="on" optimize="${build.optimize}" deprecation="on">
      <classpath refid="classpath"/>
      <include name="**/*Object.java"/>
    </javac>
    <!-- now generate the associated files -->
    <dobj classpathref="classpath">
      <fileset dir="${src.dir}" includes="**/*Object.java"/>
    </dobj>
  </target>

  <!-- generates marshaller and dispatcher classes for all invocation -->
  <!-- service declarations -->
  <target name="genservice" depends="prepare">
    <taskdef name="service" classpathref="tool.classpath"
             classname="com.threerings.presents.tools.GenServiceTask"/>
    <!-- make sure the service class files are all compiled -->
    <javac srcdir="${src.dir}" destdir="${deploy.dir}/classes" includeAntRuntime="false"
           debug="on" optimize="${build.optimize}" deprecation="on">
      <classpath refid="classpath"/>
      <include name="**/*Service.java"/>
    </javac>
    <!-- now generate the associated files -->
    <service header="lib/SOURCE_HEADER" classpathref="classpath">
      <fileset dir="${src.dir}" includes="**/*Service.java"/>
    </service>
  </target>

  <!-- generates sender and decoder classes for all invocation -->
  <!-- receiver declarations -->
  <target name="genreceiver" depends="prepare">
    <taskdef name="receiver" classpathref="tool.classpath"
             classname="com.threerings.presents.tools.GenReceiverTask"/>
    <!-- make sure the receiver class files are all compiled -->
    <javac srcdir="${src.dir}" destdir="${deploy.dir}/classes" includeAntRuntime="false"
           debug="on" optimize="${build.optimize}" deprecation="on">
      <classpath refid="classpath"/>
      <include name="**/*Receiver.java"/>
      <exclude name="**/InvocationReceiver.java"/>
    </javac>
    <!-- now generate the associated files -->
    <receiver header="lib/SOURCE_HEADER" classpathref="classpath">
      <fileset dir="${src.dir}" includes="**/*Receiver.java" excludes="**/InvocationReceiver.java"/>
    </receiver>
  </target>

  <!-- encodes our sounds to ogg and enumerates them into a master list -->
  <target name="sounds">
    <copy todir="${deploy.dir}/rsrc">
      <fileset dir="rsrc" includes="**/*.ogg"/>
    </copy>
    <exec executable="find" dir="${deploy.dir}" output="${deploy.dir}/rsrc/sounds.txt"
          failonerror="true">
      <arg value="rsrc"/>
      <arg value="-name"/>
      <arg value="*.ogg"/>
    </exec>
    <mkdir dir="${deploy.dir}/rsrc/sounds/effects"/>
    <jar file="${deploy.dir}/rsrc/sounds/effects/bundle.jar"
         basedir="${deploy.dir}/rsrc/sounds/effects">
      <include name="**/*.ogg"/>
    </jar>
    <jar file="${deploy.dir}/rsrc/sounds/feedback/bundle.jar"
         basedir="${deploy.dir}/rsrc/sounds/feedback">
      <include name="**/*.ogg"/>
    </jar>
  </target>

  <!-- enumerates all of our units, props, etc. into master lists -->
  <target name="lists">
    <exec executable="${basedir}/bin/update_lists" failonerror="true">
        <arg value="${towns}"/>
    </exec>
  </target>

  <!-- builds bundles for a specific town -->
  <target name="town_bundles">
    <for list="units,props,bonuses,cards,effects,extras,goods,bounties" param="type">
    <sequential>
      <!-- Card and Unit icons were included in the general resource bundle -->
      <if><equals arg1="@{type}" arg2="cards"/><then>
        <var name="excluding" value="**/card.png"/>
      </then><elseif><equals arg1="@{type}" arg2="units"/><then>
        <var name="excluding" value="**/icon.png"/>
      </then></elseif><else>
        <var name="excluding" value=""/>
      </else></if>
      <jar file="${deploy.dir}/rsrc/@{type}/${town}/bundle.jar">
        <fileset dir="${deploy.dir}/rsrc/@{type}/${town}" excludes="${excluding}">
          <include name="*.txt"/>
          <include name="**/*"/>
          <exclude name="**/*.jar"/>
        </fileset>
      </jar>
    </sequential></for>

    <mkdir dir="${deploy.dir}/rsrc/sounds/music/${town}"/>
    <jar file="${deploy.dir}/rsrc/sounds/music/${town}/bundle.jar"
         basedir="${deploy.dir}/rsrc/sounds/music/${town}">
      <include name="**/*.ogg"/>
    </jar>
  </target>

  <!-- compiles our models -->
  <target name="models">
    <taskdef name="compile" classpathref="tool.classpath"
             classname="com.threerings.jme.tools.CompileModelTask"/>
    <compile dest="${deploy.dir}">
      <fileset dir="rsrc" includes="**/model.properties"/>
    </compile>
    <taskdef name="updatepropheight" classpathref="tool.classpath"
             classname="com.threerings.bang.tools.UpdatePropHeightTask"/>
    <updatepropheight>
      <fileset dir="rsrc" includes="**/prop.properties"/>
    </updatepropheight>

    <copy todir="${deploy.dir}/rsrc/units/wreckage">
        <fileset dir="rsrc/units/wreckage">
          <include name="**/*.png"/>
          <exclude name="**/source/**"/>
        </fileset>
    </copy>

    <for list="${towns}" param="town"><sequential>
      <copy todir="${deploy.dir}/rsrc/units/@{town}">
        <fileset dir="rsrc/units/@{town}">
          <include name="**/unit.properties"/>
          <include name="**/*.png"/>
          <exclude name="**/source/**"/>
        </fileset>
      </copy>
      <copy todir="${deploy.dir}/rsrc/props/@{town}">
        <fileset dir="rsrc/props/@{town}">
          <include name="**/prop.properties"/>
          <include name="**/*.png"/>
          <exclude name="**/source/**"/>
        </fileset>
      </copy>
      <copy todir="${deploy.dir}/rsrc/bonuses/@{town}">
        <fileset dir="rsrc/bonuses/@{town}">
          <include name="**/bonus.properties"/>
          <include name="**/*.png"/>
          <exclude name="**/source/**"/>
        </fileset>
      </copy>
      <copy todir="${deploy.dir}/rsrc/effects/@{town}">
        <fileset dir="rsrc/effects/@{town}">
          <include name="**/particles.txt"/>
          <include name="**/particles.properties"/>
          <include name="**/particles.jme"/>
          <include name="**/icons.txt"/>
          <include name="**/icon.properties"/>
          <include name="**/*.png"/>
        </fileset>
      </copy>
      <mkdir dir="${deploy.dir}/rsrc/extras/@{town}"/>
      <copy todir="${deploy.dir}/rsrc/extras/@{town}">
        <fileset dir="rsrc/extras/@{town}">
          <include name="**/*.png"/>
          <exclude name="**/source/**"/>
        </fileset>
      </copy>
    </sequential></for>
  </target>

  <!-- loads our boards into the database -->
  <target name="boards">
    <ant antfile="etc/build-boards.xml" inheritAll="false"/>
  </target>

  <!-- compiles our tutorial XML definitions -->
  <target name="tutorials">
    <taskdef name="confcomp" classpathref="tool.classpath"
             classname="com.threerings.tools.CompiledConfigTask"/>
    <confcomp dest="${deploy.dir}" parser="com.threerings.bang.game.tools.xml.TutorialConfigParser">
      <fileset dir="rsrc/tutorials" includes="**/*.xml"/>
    </confcomp>
  </target>

  <!-- creates the serialized color repository config -->
  <target name="colorpos">
    <taskdef name="confcomp" classpathref="tool.classpath"
      classname="com.threerings.tools.CompiledConfigTask"/>
    <confcomp dest="${deploy.dir}" parser="com.threerings.media.image.tools.xml.ColorPositoryParser"
              configdef="rsrc/config/media/colordefs.xml"/>
  </target>

  <!-- creates the serialized article and aspect catalogs -->
  <target name="catalogs">
    <taskdef name="confcomp" classpathref="tool.classpath"
             classname="com.threerings.tools.CompiledConfigTask"/>
    <confcomp dest="${deploy.dir}" configdef="rsrc/avatars/articles.xml"
              parser="com.threerings.bang.avatar.tools.xml.ArticleCatalogParser"/>
    <confcomp dest="${deploy.dir}" configdef="rsrc/avatars/aspects.xml"
              parser="com.threerings.bang.avatar.tools.xml.AspectCatalogParser"/>
    <confcomp dest="${deploy.dir}" configdef="rsrc/avatars/buckle_parts.xml"
              parser="com.threerings.bang.avatar.tools.xml.BucklePartCatalogParser"/>
  </target>

  <!-- helper task for 'avatars' -->
  <target name="avatar_comps">
    <taskdef name="cbundle" classpathref="classpath"
      classname="com.threerings.cast.bundle.tools.ComponentBundlerTask"/>
    <mkdir dir="${deploy.dir}/rsrc/avatars/${comp.bundle}"/>
    <cbundle actiondef="rsrc/avatars/actions.xml" mapfile="rsrc/avatars/compmap.txt"
             root="rsrc/avatars/${comp.root}"
             target="${deploy.dir}/rsrc/avatars/${comp.bundle}/components.jar">
      <fileset dir="rsrc/avatars/${comp.bundle}">
        <include name="**/*.png"/>
        <exclude name="**/*_shadow.png"/>
        <exclude name="**/*_crop.png"/>
        <exclude name="components/**"/>
      </fileset>
    </cbundle>
  </target>

  <!-- builds the avatar component bundles -->
  <target name="avatars" depends="catalogs">
    <taskdef name="metabundle" classpathref="tool.classpath"
             classname="com.threerings.cast.bundle.tools.MetadataBundlerTask"/>
    <metabundle actiondef="${basedir}/rsrc/avatars/actions.xml"
                classdef="${basedir}/rsrc/avatars/classes.xml"
                target="${deploy.dir}/rsrc/avatars/metadata.jar"/>

    <for list="${towns}" param="town"><sequential>
      <for list="male,female" param="gender"><sequential>
        <antcall target="avatar_comps">
          <param name="comp.bundle" value="@{town}/@{gender}"/>
          <param name="comp.root" value="@{town}"/>
        </antcall>
      </sequential></for>
    </sequential></for>

    <antcall target="avatar_comps">
      <param name="comp.bundle" value="buckle"/>
      <param name="comp.root" value=""/>
    </antcall>
  </target>

  <!-- run the unit tests -->
  <target name="tests" depends="compile" description="Runs unit tests.">
    <taskdef name="unit" classpathref="tool.classpath"
             classname="org.apache.tools.ant.taskdefs.optional.junit.JUnitTask"/>
    <unit printsummary="no" haltonfailure="yes" fork="true">
      <classpath refid="classpath"/>
      <formatter type="brief" usefile="false"/>
      <batchtest>
        <fileset dir="${src.dir}" includes="**/*UnitTest.java"/>
      </batchtest>
    </unit>
  </target>

  <!-- cleans out the compiled code -->
  <target name="clean">
    <delete dir="${deploy.dir}/classes/com"/>
    <delete><fileset dir="." includes="debug.txt*"/></delete>
  </target>

  <!-- fully cleans out all build results -->
  <target name="distclean" depends="clean">
    <delete dir="${deploy.dir}"/>

    <ant dir="projects/installers" target="clean" inheritAll="false"/>
    <ant dir="projects/pseditor" target="clean" inheritAll="false"/>
    <delete file="etc/bang-client.pro"/>

    <!-- if we're generating packages, revert any modified model.properties files to -->
    <!-- avoid checkclean freakout -->
    <if><isset property="props.dist"/><then>
      <taskdef resource="org/tigris/subversion/svnant/svnantlib.xml">
        <classpath><path refid="subversion.classpath"/></classpath>
      </taskdef>
      <svn javahl="false">
        <revert><fileset dir="rsrc" includes="**/model.properties"/></revert>
      </svn>
    </then></if>
  </target>

  <!-- build the java class files -->
  <target name="compile" depends="prepare">
    <javac srcdir="${src.dir}" destdir="${deploy.dir}/classes" includeAntRuntime="false"
           debug="on" optimize="${build.optimize}" deprecation="on">
      <classpath refid="classpath"/>
      <compilerarg value="-Xlint"/>
      <compilerarg value="-Xlint:-serial"/>
    </javac>
  </target>

  <!-- build the javadoc documentation -->
  <target name="javadoc" depends="prepare,common-javadoc"/>

  <!-- helper target for client and devclient -->
  <target name="baseclient">
    <!-- generate the all-in-wonder jar file -->
    <taskdef resource="proguard/ant/task.properties" classpath="${deploy.dir}/lib/proguard.jar"/>
    <proguard configuration="etc/bang-client.pro"/>

    <!-- create our directories if necessary -->
    <mkdir dir="${client_dir}/code"/>
    <mkdir dir="${client_dir}/rsrc"/>
    <mkdir dir="${client_dir}/native"/>

    <!-- create our configuration jar file -->
    <jar destfile="${client_dir}/code/config.jar">
      <fileset dir="${deploy.dir}">
        <include name="deployment.properties"/>
        <include name="build.properties"/>
      </fileset>
    </jar>

    <!-- copy our various bits into the deployment directory -->
    <copy todir="${client_dir}">
      <fileset dir="projects/installers/${default_locale}">
        <include name="background.png"/>
        <include name="progress.png"/>
      </fileset>
    </copy>
    <copy todir="${client_dir}/code">
      <fileset dir="dist" includes="bang-pcode.jar"/>
      <fileset dir="dist" includes="bang-config.jar"/>
      <fileset dir="${deploy.dir}/lib" includes="lwjgl.jar"/>
      <fileset dir="${deploy.dir}/lib" includes="lwjgl_util.jar"/>
      <fileset dir="${deploy.dir}/lib" includes="commons-beanutils.jar"/>
      <fileset dir="${deploy.dir}/lib" includes="commons-digester.jar"/>
      <fileset dir="${deploy.dir}/lib" includes="commons-logging.jar"/>
    </copy>
    <copy file="${extlibs.dir}/getdown-pro.jar" tofile="${client_dir}/code/getdown-pro-new.jar"/>
    <delete file="${deploy.dir}/bang-pcode.jar"/>
    <copy todir="${client_dir}/rsrc">
      <fileset dir="${deploy.dir}/rsrc" includes="**/*.jar"/>
      <fileset dir="rsrc" includes="config/resource/manager.properties"/>
    </copy>
    <copy todir="${client_dir}/native">
      <fileset dir="lib/i686-Linux" includes="*.so"/>
      <fileset dir="lib/i686-Windows" includes="*.dll"/>
      <fileset dir="lib/Universal-MacOS" includes="*"/>
    </copy>

    <!-- generate the getdown digest file -->
    <taskdef name="digest" classname="com.threerings.getdown.tools.DigesterTask">
      <classpath>
        <pathelement path="${deploy.dir}/lib/commons-codec.jar"/>
        <pathelement path="${deploy.dir}/lib/getdown.jar"/>
        <pathelement path="${deploy.dir}/lib/samskivert.jar"/>
      </classpath>
    </taskdef>
    <property file="${cert_dir}/certificate.properties"/>
    <digest appdir="${client_dir}" keystore="${sign.keystore}" alias="${sign.alias}"
            storepass="${sign.storepass}"/>
  </target>

  <!-- builds the development client getdown distribution -->
  <target name="devclient" depends="copydistprops">
    <!-- for consistency with the prod client, we'll set the version, which is always 0 -->
    <property name="version" value="0"/>
    <!-- be extra safe and remove any old build.properties -->
    <delete file="${basedir}/${deploy.dir}/build.properties"/>
    <propertyfile file="${basedir}/${deploy.dir}/build.properties">
      <entry key="version" value="${version}"/>
      <entry key="config_version" value="${version}"/>
    </propertyfile>
    <echo message="Generating Proguard config file for devclient..."/>
    <copy file="etc/bang-client.pro.in" tofile="etc/bang-client.pro"
          overwrite="true" encoding="UTF-8">
      <filterset>
        <filter token="version" value="${version}"/>
        <filter token="apply_mapping" value="#"/>
        <filter token="apply_file" value="#"/>
      </filterset>
    </copy>

    <!-- copy the getdown.txt file into the right place -->
    <property name="client.base" value="${deploy.dir}/client/pages/client"/>
    <mkdir dir="${client.base}"/>
    <copy file="etc/getdown.txt" tofile="${client.base}/getdown.txt"
          overwrite="true" encoding="UTF-8">
      <filterset>
        <filter token="appbase_line" value="appbase = ${root_url}/client"/>
        <filter token="version_line" value=""/>
        <filter token="tracking_url" value="${root_url}/tracking/"/>
        <filter token="auxgroups_line" value="auxgroups = indian_post, boom_town"/>
      </filterset>
    </copy>

    <antcall target="baseclient">
      <param name="client_dir" value="${client.base}"/>
    </antcall>

    <!-- make our Proguard mapping file accessible to Hemiptera -->
    <mkdir dir="${deploy.dir}/hemiptera-map"/>
    <move file="etc/proguard/${version}.map" todir="${deploy.dir}/hemiptera-map"/>

    <!-- generate some game metadata summary pages -->
    <property name="pages.out" value="${basedir}/${deploy.dir}/client/pages"/>
    <java classpathref="tool.classpath" failonerror="true" output="${pages.out}/units.html"
          fork="true" classname="com.threerings.bang.game.tools.PrintDamageTable">
      <arg value="boom_town"/>
    </java>
    <java classpathref="tool.classpath" failonerror="true" output="${pages.out}/aspects.html"
          fork="true" classname="com.threerings.bang.avatar.tools.SummarizeAspects">
       <sysproperty key="no_unpack_resources" value="true"/>
       <sysproperty key="resource_dir" value="${basedir}/rsrc"/>
    </java>
    <java classpathref="tool.classpath" failonerror="true" output="${pages.out}/aspects.html"
          fork="true" classname="com.threerings.bang.avatar.tools.SummarizeArticles">
       <sysproperty key="no_unpack_resources" value="true"/>
       <sysproperty key="resource_dir" value="${basedir}/rsrc"/>
    </java>
    <java classpathref="tool.classpath" failonerror="true" output="${pages.out}/ft_bounties.html"
          fork="true" classname="com.threerings.bang.bounty.tools.SummarizeBounties">
       <arg value="frontier_town"/>
    </java>
    <exec executable="${basedir}/bin/update_board_summary" failonerror="true">
      <arg value="${pages.out}/boards.html"/>
    </exec>
  </target>

  <!-- builds the development client getdown distribution and copies it into -->
  <!-- the local document tree for developer testing -->
  <target name="localclient" depends="devclient">
    <copy todir="pages">
      <fileset dir="${deploy.dir}/client/pages" includes="client/**"/>
    </copy>
  </target>

  <!-- builds the production client getdown distribution -->
  <target name="client" depends="copydistprops">
    <exec executable="${basedir}/build/bin/buildstamp" outputproperty="version"
          failonerror="true">
    </exec>
    <!-- be extra safe and remove any old build.properties -->
    <delete file="${basedir}/${deploy.dir}/build.properties"/>
    <propertyfile file="${basedir}/${deploy.dir}/build.properties">
      <entry key="version" value="${version}"/>
      <entry key="config_version" value="${version}"/>
    </propertyfile>
    <exec executable="${basedir}/bin/getversion" outputproperty="latest_version"
          failonerror="true">
      <arg line="client"/>
      <arg line="${download_root_url}"/>
    </exec>
    <!-- be sure a proguard map file does not already exist for this version -->
    <available file="etc/proguard/${version}.map" property="map.exists"/>
    <fail message="A map file for this version already exists. Wait 15 minutes to build again.">
      <condition><istrue value="${map.exists}"/></condition>
    </fail>
    <echo message="Previous version used for renaming: ${latest_version}"/>
    <echo message="Generating Proguard config file for ${version}..."/>
    <copy file="etc/bang-client.pro.in" tofile="etc/bang-client.pro"
          overwrite="true" encoding="UTF-8">
      <filterset>
        <filter token="version" value="${version}"/>
        <filter token="apply_mapping" value="-applymapping"/>
        <filter token="apply_file" value="proguard/${latest_version}.map"/>
      </filterset>
    </copy>

    <!-- copy the getdown.txt file into the right place -->
    <property name="client.base" value="${deploy.dir}/client/pages/client/${version}"/>
    <mkdir dir="${client.base}"/>
    <copy file="etc/getdown.txt" tofile="${client.base}/getdown.txt.tmp"
          overwrite="true" encoding="UTF-8">
      <filterset>
        <filter token="appbase_line" value="appbase = ${download_root_url}/client/%VERSION%"/>
        <filter token="version_line" value="version = ${version}"/>
        <filter token="auxgroups_line" value="auxgroups = indian_post"/>
      </filterset>
    </copy>
    <!-- do some temporary fiddling to nix boom_town from production -->
    <exec executable="egrep" output="${client.base}/getdown.txt" failonerror="true">
      <arg line="-v"/>
      <arg line="boom_town"/>
      <arg line="${client.base}/getdown.txt.tmp"/>
    </exec>
    <!-- delete the temporary file -->
    <delete file="${client.base}/getdown.txt.tmp"/>

    <antcall target="baseclient">
      <param name="client_dir" value="${client.base}"/>
    </antcall>

    <!-- copy the just built client into var/ where it can be used for future diffing -->
    <mkdir dir="${var.dir}"/>
    <copy todir="${var.dir}">
      <fileset dir="${deploy.dir}/client/pages/client" includes="${version}/**"/>
    </copy>

    <!-- create the getdown diff files -->
    <copy todir="${deploy.dir}/lib" file="${java.home}/lib/javaws.jar"/>
    <for param="dir">
      <path>
        <dirset dir="${var.dir}" includes="*"/>
      </path>
      <sequential>
        <basename property="patch.version" file="@{dir}"/>
        <if><not><equals arg1="${patch.version}" arg2="${version}"/></not>
        <then>
          <java classpathref="tool.classpath" failonerror="true" fork="true"
                classname="com.threerings.getdown.tools.Differ">
             <arg value="${client.base}"/>
             <arg value="@{dir}"/>
          </java>
        </then></if>
        <var name="patch.version" unset="true"/>
      </sequential>
    </for>

    <!-- make all our Proguard mapping file accessible to Hemiptera -->
    <mkdir dir="${deploy.dir}/hemiptera-map"/>
    <copy todir="${deploy.dir}/hemiptera-map">
      <fileset dir="etc/proguard" includes="??????????.map"/>
    </copy>
    <!-- commit the proguard map file -->
    <if>
      <or><equals arg1="${props.dist}" arg2="production"/>
      <equals arg1="${props.dist}" arg2="test"/></or>
    <then>
      <exec executable="svn" failonerror="true">
        <arg value="add"/>
        <arg value="etc/proguard/${version}.map"/>
      </exec>
      <exec executable="svn" failonerror="true">
        <arg value="commit"/>
        <arg value="-m"/>
        <arg value="New proguard mapping file for version ${version}."/>
        <arg value="etc/proguard/${version}.map"/>
      </exec>
    </then></if>

    <!-- if enabled, upload the client to S3 -->
    <if><istrue value="${client_s3enable}"/><then>
        <property name="s3upload" value="${deploy.dir}/tmp/s3upload"/>
        <delete dir="${s3upload}"/>
        <copy todir="${s3upload}/bang">
          <fileset dir="${deploy.dir}/client/pages" includes="client/${version}/**"/>
        </copy>
        <echo>Uploading the client to S3</echo>
        <taskdef name="s3upload" classname="com.threerings.ant.S3Upload"
                 classpathref="tool.classpath"/>
        <s3upload awsAuthId="${client_s3id}" awsAuthKey="${client_s3key}"
                  awsBucket="${client_s3bucket}">
            <fileset dir="${s3upload}" includes="bang/**"/>
        </s3upload>
    </then></if>
  </target>

  <!-- signs and install the Getdown applet jar file -->
  <target name="applet" depends="prepare">
    <property name="applet.base" value="${deploy.dir}/applet/pages"/>
    <mkdir dir="${applet.base}/incl"/>
    <mkdir dir="${applet.base}/client"/>
    <property file="${cert_dir}/certificate.properties"/>

    <!-- copy the applet jar file into place and sign it -->
    <copy file="${extlibs.dir}/getdown-retro-pro.jar" todir="${applet.base}/client"/>
    <signjar keystore="${sign.keystore}" alias="${sign.alias}" storepass="${sign.storepass}">
      <fileset dir="${applet.base}/client" includes="getdown-retro-pro.jar"/>
    </signjar>

    <!-- generate our applet tags -->
    <copy file="pages/incl/launch_open.html.in" tofile="${applet.base}/incl/launch_open.html"
          overwrite="true" encoding="UTF-8">
      <filterset>
        <filter token="APPBASE" value="${root_url}/client"/>
        <filter token="APPNAME" value="${client_ident}"/>
        <filter token="IMGPATH" value="/client/background.png"/>
      </filterset>
    </copy>
  </target>

  <!-- a target for rebuilding everything -->
  <target name="all" depends="clean,prepare,compile,javadoc,dist"/>

  <!-- rebuild all the niggling bits -->
  <target name="bits" depends="colorpos,tutorials"/>

  <!-- convenience targets that build specific projects and copy the results -->
  <target name="bui">
    <antcall target="distprojects"><param name="projects" value="jme-bui"/></antcall>
  </target>

  <!-- builds the distribution jar files -->
  <target name="dist" depends="prepare,compile">
    <!-- create the main jar file with all the code and fiddly bits -->
    <jar file="${deploy.dir}/bang-code.jar" basedir="${deploy.dir}/classes" includes="com/**"/>
    <!-- create a jar file for use by the Underwire support system -->
    <jar file="${deploy.dir}/bang-support.jar" basedir="${deploy.dir}/classes">
      <include name="com/threerings/bang/server/persist/**"/>
      <include name="com/threerings/bang/data/Handle.class"/>
    </jar>
  </target>

  <!-- builds the avatar, media and sounds jar files -->
  <target name="mdist" depends="prepare,sounds,bits">
    <!-- build our models and avatars by execing ant separately because it seems to -->
    <!-- otherwise blow its top due to some heap size wackiness -->
    <exec executable="ant" dir="${basedir}" failonerror="true">
      <env key="ANT_OPTS" value="-mx128M"/>
      <arg line="-Dtowns=${towns}"/>
      <arg line="avatars"/>
    </exec>
    <exec executable="ant" dir="${basedir}" failonerror="true">
      <env key="ANT_OPTS" value="-mx128M"/>
      <arg line="-Dtowns=${towns}"/>
      <arg line="models"/>
    </exec>

    <!-- now build our media bundles -->
    <for list="${towns}" param="town"><sequential>
      <antcall target="town_bundles"><param name="town" value="@{town}"/></antcall>
    </sequential></for>

    <!-- build our wreckage bundle -->
    <mkdir dir="${deploy.dir}/rsrc/units/wreckage"/>
    <jar file="${deploy.dir}/rsrc/units/wreckage/bundle.jar">
      <fileset dir="rsrc/units/wreckage">
        <include name="**/*.png"/>
        <exclude name="**/source/**"/>
      </fileset>
      <fileset dir="${deploy.dir}/rsrc/units/wreckage">
        <include name="**/model.dat"/>
        <include name="**/*.ogg"/>
      </fileset>
    </jar>

    <!-- put our non-town-specific goods resources in a bundle -->
    <jar file="${deploy.dir}/rsrc/goods/bundle.jar" basedir="${deploy.dir}/rsrc/goods">
      <include name="**/*"/>
      <exclude name="**/*.jar"/>
    </jar>

    <!-- our top-level resources have all been copied into ${deploy.dir}/ -->
    <jar file="${deploy.dir}/rsrc/bundle.jar" basedir="${deploy.dir}/rsrc">
      <include name="**/*.png"/>
      <include name="**/*.jpg"/>
      <include name="**/*.vert"/>
      <include name="**/*.frag"/>
      <include name="**/*.ttf"/>
      <include name="menu/**/*.board"/>
      <include name="menu/*.ogg"/>
      <include name="influences/**/*.ogg"/>
      <exclude name="bonuses/**"/>
      <exclude name="bounties/**"/>
      <exclude name="cards/**"/>
      <exclude name="effects/**"/>
      <exclude name="extras/**"/>
      <exclude name="props/**"/>
      <exclude name="units/**"/>
      <fileset dir="${deploy.dir}/rsrc">
        <include name="cards/**/card.png"/>
        <include name="units/**/icon.png"/>
      </fileset>
    </jar>

    <!-- collect up various configuration bits needed by the client -->
    <jar destfile="${deploy.dir}/bang-config.jar">
      <fileset dir="${deploy.dir}">
        <include name="rsrc/**/*"/>
        <exclude name="rsrc/**/*.png"/>
        <exclude name="rsrc/**/*.jpg"/>
        <exclude name="rsrc/**/*.vert"/>
        <exclude name="rsrc/**/*.frag"/>
        <exclude name="rsrc/**/*.board"/>
        <exclude name="**/*.jar"/>
        <exclude name="rsrc/bonuses/**"/>
        <exclude name="rsrc/bounties/**"/>
        <exclude name="rsrc/cards/**"/>
        <exclude name="rsrc/effects/**"/>
        <exclude name="rsrc/extras/**"/>
        <exclude name="rsrc/props/**"/>
        <exclude name="rsrc/sounds/**"/>
        <exclude name="rsrc/units/**"/>
      </fileset>
    </jar>

    <!-- the server can't access things in the bundle files, so we make one -->
    <!-- big file with all of our unit, prop, bonus and other properties -->
    <jar destfile="${deploy.dir}/bang-server-config.jar">
      <fileset dir="${deploy.dir}">
        <include name="rsrc/units/**"/>
        <include name="rsrc/props/**"/>
        <include name="rsrc/effects/**"/>
        <include name="rsrc/bonuses/**"/>
        <include name="rsrc/bounties/**"/>
        <include name="rsrc/extras/**"/>
        <exclude name="**/*.jar"/>
      </fileset>
    </jar>
  </target>

  <!-- cleans JME which doesn't fit into our standard scheme -->
  <target name="cleanjme">
    <echo>Cleaning in jme...</echo>
    <delete dir="${projects.dir}/jme/build"/>
    <delete dir="${projects.dir}/jme/data/doc"/>
    <delete><fileset dir="${projects.dir}/jme/target" includes="jme*.jar"/></delete>
  </target>

  <!-- rebuilds JME which doesn't fit into our standard scheme -->
  <target name="distjme">
    <echo>Building in jme...</echo>
    <ant dir="${projects.dir}/jme" target="dist-all" inheritAll="false"/>
    <copy todir="${deploy.dir}/lib">
      <fileset dir="${projects.dir}/jme/target">
        <include name="jme.jar"/>
        <include name="jme-awt.jar"/>
        <include name="jme-effects.jar"/>
        <include name="jme-gamestates.jar"/>
        <include name="jme-model.jar"/>
        <include name="jme-scene.jar"/>
        <include name="jme-sound.jar"/>
        <include name="jme-terrain.jar"/>
      </fileset>
    </copy>
  </target>

  <!-- rebuilds all subprojects and the whole top-level distribution -->
  <target name="distall" depends="prepare,distjme,distprojects,dist,distwebapps,mdist">
    <!-- copy native narya libraries into ${deploy.dir}/lib -->
    <copy todir="${deploy.dir}/lib">
      <fileset dir="projects/narya/${deploy.dir}/lib" includes="**/libsignal.so"/>
      <fileset dir="lib/" includes="**/*.so"/>
      <fileset dir="lib/" includes="**/*.jnilib"/>
      <fileset dir="lib/" includes="**/*.dylib"/>
    </copy>
  </target>

  <!-- rebuilds everything and extra bits for packaging -->
  <target name="distpkg">
    <!-- don't include boom_town bundles in production builds -->
    <if><equals arg1="${props.dist}" arg2="production"/>
      <then>
        <antcall target="distall">
          <param name="towns" value="frontier_town,indian_post"/>
        </antcall>
      </then>
    <else>
      <antcall target="distall"/>
    </else></if>

    <if><istrue value="${build.docs}"/><then>
      <antcall target="javadoc"/>
    </then></if>

    <!-- only build the pseditor for the devel builds -->
    <if><equals arg1="${props.dist}" arg2="devel"/><then>
      <ant dir="projects/pseditor" target="proguard" inheritAll="false"/>
    </then></if>

    <!-- build the distributable client and installers -->
    <if><equals arg1="${props.dist}" arg2="devel"/>
      <then>
        <antcall target="devclient"/>
        <ant dir="projects/installers" target="devclient"/>
        <antcall target="applet"/>
      </then>
    <elseif>
      <or><equals arg1="${props.dist}" arg2="production"/>
      <equals arg1="${props.dist}" arg2="test"/></or>
      <then>
        <antcall target="client"/>
        <ant dir="projects/installers" target="client"/>
        <antcall target="applet"/>
      </then>
    </elseif></if>

    <!-- if we're generating a package, commit any changes to compmap.txt -->
    <if><isset property="props.dist"/><then>
      <property name="comp.map" value="${basedir}/rsrc/avatars/compmap.txt"/>
      <taskdef resource="org/tigris/subversion/svnant/svnantlib.xml">
        <classpath><path refid="subversion.classpath"/></classpath>
      </taskdef>
      <svn javahl="false">
        <status path="${comp.map}" textStatusProperty="compStatus"/>
      </svn>
      <if><equals arg1="${compStatus}" arg2="modified"/><then>
        <exec executable="svn" failonerror="true">
          <arg value="commit"/>
          <arg value="-m"/>
          <arg value="New component mappings."/>
          <arg value="${comp.map}"/>
        </exec>
      </then></if>
    </then></if>
  </target>

  <!-- cleans out the application and all subprojects -->
  <target name="cleanall" depends="cleanprojects,cleanwebapps,clean"/>

  <!-- fully cleans out the application and all subprojects -->
  <target name="distcleanall" depends="distcleanprojects,distcleanwebapps,cleanjme,distclean"/>

  <!-- prepare ${destroot} for all the packages being built -->
  <target name="preppkg" depends="copydistprops">
    <antcallback target="prepare-server" return="pkg.base"/>
    <antcall target="prepare-server-extra"/>
    <antcall target="prepare-webapps"/>
    <antcall target="prepare-extra">
      <param name="extra.type" value="installer"/>
    </antcall>

    <!-- only package the pseditor for the devel builds -->
    <if><equals arg1="${props.dist}" arg2="devel"/><then>
      <antcall target="prepare-extra">
        <param name="extra.type" value="pseditor"/>
      </antcall>
    </then></if>

    <property file="${basedir}/${deploy.dir}/build.properties"/>
    <assert name="version" message="version, which comes from build.properties, must be set."/>
    <!-- prepare the client and installer to be packaged -->
    <antcall target="prepare-extra">
      <param name="extra.type" value="client"/>
      <param name="pkg.name" value="bang-client-${version}"/>
    </antcall>
    <antcall target="prepare-extra">
      <param name="extra.type" value="applet"/>
    </antcall>
    <!-- the production client package needs to update the client/getdown.txt symlink -->
    <antcall target="maintainer-scripts">
      <param name="install.type" value="client"/>
      <param name="client.version" value="${version}"/>
      <param name="client.ident" value="client"/>
      <param name="client.path" value=""/>
      <param name="pkg.name" value="bang-client"/>
    </antcall>
    <!-- append the version number to the package name. for dev this will always be 0 -->
    <!-- also setup the bang-client-current dwb file -->
    <copy file="etc/bang-client.dwb.in.in"
          tofile="${deploy.dir}/tmp/bang-client-${version}.dwb.in"/>
    <copy file="etc/bang-client-current.dwb.in.in"
          tofile="${deploy.dir}/tmp/bang-client-current.dwb.in">
      <filterset>
        <filter token="CLIENTVERSION" value="${version}"/>
      </filterset>
    </copy>

    <!-- prepare the metapackages -->
    <antcall target="prepare-meta">
      <param name="pkg.names" value="bang-client-current,bang-game-server,bang-web-server"/>
    </antcall>

    <antcall target="prepare-extra">
      <param name="extra.type" value="hemiptera-map"/>
      <param name="pkg.prefix" value="${prefix}/threerings/etc/proguard/${app.name}"/>
    </antcall>

    <if><istrue value="${build.docs}"/><then>
      <antcall target="prepare-docs"/>
    </then></if>
  </target>

  <!-- install project specific server code into ${pkg.base} -->
  <target name="prepare-server-extra">
    <copy todir="${pkg.base}/${deploy.dir}/rsrc">
      <fileset dir="${deploy.dir}/rsrc" includes="avatars/**/*.jar"/>
    </copy>
    <copy todir="${pkg.base}/rsrc">
      <fileset dir="rsrc" includes="boards/**/*.board"/>
    </copy>
    <copy file="log/README" todir="${pkg.base}/log"/>
    <copy file="rsrc/config/resource/manager.properties"
          todir="${pkg.base}/${deploy.dir}/rsrc/config/resource/"/>
    <copy file="etc/build-boards.xml" todir="${pkg.base}/etc"/>
    <copy file="tools/lib/perl/GrindUtil.pm" todir="${pkg.base}/tools/lib/perl"/>
    <antcall target="copywithperms">
      <param name="copy.perms" value="755"/>
      <param name="copy.src"   value="tools/bin"/>
      <param name="copy.list"  value="lfilter,filter_interesting,sum_invokers"/>
      <param name="copy.dest"  value="${pkg.base}/tools/bin"/>
    </antcall>
    <antcall target="prepare-server-rcscript"/>
    <mkdir dir="${pkg.base}/run"/>
    <mkdir dir="${pkg.base}/logs"/>
    <mkdir dir="${pkg.base}/pages/stats"/>
    <mkdir dir="${pkg.base}/data"/>
    <mkdir dir="${pkg.base}/data/downloads"/>
    <copy todir="${pkg.base}/data">
      <fileset dir="data" includes="soundtrack/*.mp3"/>
    </copy>
  </target>

</project>
