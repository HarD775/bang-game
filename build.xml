<!-- build configuration -->
<project name="bang" default="compile" basedir=".">

  <!-- define some basic project parameters -->
  <property name="app.name"         value="bang"/>
  <property name="doc.packages"     value="com.threerings.bang.*"/>
  <property name="copy.holder"      value="Three Rings Design, Inc."/>

  <!-- read in our deployment properties -->
  <property file="deployment.properties"/>
  <property file="build.properties"/>

  <!-- things you probably don't want to change -->
  <property name="src.dir"      value="src/java"/>
  <property name="deploy.dir"   value="dist"/>
  <property name="javadoc.dir"  value="${deploy.dir}/docs"/>
  <property name="savedoc.dir"  value="docs"/>
  <property name="nartool.path"   value="projects/narya/bin"/>

  <!-- declare our classpath -->
  <path id="classpath">
    <pathelement location="${deploy.dir}/classes"/>
    <fileset dir="dist" includes="${app.name}-code.jar"/>
    <fileset dir="lib" includes="**/*.jar"/>
    <fileset dir="/export/tools/lib/java" includes="**/*.jar"/>
  </path>

  <!-- generates additional methods for distributed object classes -->
  <target name="gendobj" depends="prepare">
    <taskdef name="dobj"
             classname="com.threerings.presents.tools.GenDObjectTask"
             classpathref="classpath"/>
    <!-- make sure the dobject class files are all compiled -->
    <javac srcdir="src/java" destdir="${deploy.dir}/classes"
           debug="on" optimize="${build.optimize}" deprecation="on">
      <classpath refid="classpath"/>
      <include name="**/*Object.java"/>
    </javac>
    <!-- now generate the associated files -->
    <dobj classpathref="classpath">
      <fileset dir="src/java" includes="**/*Object.java"/>
    </dobj>
  </target>

  <!-- generates marshaller and dispatcher classes for all invocation -->
  <!-- service declarations -->
  <target name="genservice"> 
    <taskdef name="service"
             classname="com.threerings.presents.tools.GenServiceTask"
             classpathref="classpath"/>
    <!-- make sure the service class files are all compiled -->
    <javac srcdir="src/java" destdir="${deploy.dir}/classes"
           debug="on" optimize="${build.optimize}" deprecation="on">
      <classpath refid="classpath"/>
      <include name="**/*Service.java"/>
    </javac>
    <!-- now generate the associated files -->
    <service header="lib/SOURCE_HEADER" classpathref="classpath">
      <fileset dir="src/java" includes="**/*Service.java"/>
    </service>
  </target>

  <!-- generates sender and decoder classes for all invocation -->
  <!-- receiver declarations -->
  <target name="genreceiver"> 
    <taskdef name="receiver"
             classname="com.threerings.presents.tools.GenReceiverTask"
             classpathref="classpath"/>
    <!-- make sure the receiver class files are all compiled -->
    <javac srcdir="src/java" destdir="${deploy.dir}/classes"
           debug="on" optimize="${build.optimize}" deprecation="on">
      <classpath refid="classpath"/>
      <include name="**/*Receiver.java"/>
      <exclude name="**/InvocationReceiver.java"/>
    </javac>
    <!-- now generate the associated files -->
    <receiver header="lib/SOURCE_HEADER" classpathref="classpath">
      <fileset dir="src/java" includes="**/*Receiver.java"
        excludes="**/InvocationReceiver.java"/>
    </receiver>
  </target>

  <!-- prepares the application directories -->
  <target name="prepare">
    <mkdir dir="${deploy.dir}"/>
    <mkdir dir="${deploy.dir}/classes"/>
    <mkdir dir="${deploy.dir}/classes/rsrc"/>
    <mkdir dir="${javadoc.dir}"/>
    <copy todir="${deploy.dir}/classes">
      <fileset dir="${src.dir}" includes="**/*.properties"/>
    </copy>
  </target>

  <!-- copies our resources into the build directory -->
  <target name="rsrc">
    <copy todir="${deploy.dir}/classes/rsrc">
      <fileset dir="rsrc">
       <include name="**/*"/>
       <exclude name="units/**"/>
       <exclude name="props/**"/>
       <exclude name="extras/**"/>
       <exclude name="bonuses/**"/>
       <exclude name="fences/**"/>
       <exclude name="boards/**"/>
       <exclude name="avatars/**"/>
       <exclude name="tutorials/**/*.xml"/>
       <exclude name="config/**/*.xml"/>
       <exclude name="**/*.jar"/>
       <exclude name="**/source/**"/>
      </fileset>
      <fileset dir="rsrc">
       <include name="*/*.txt"/>
       <include name="avatars/*.dat"/>
      </fileset>
    </copy>
  </target>

  <!-- enumerates all of our sounds into a master list -->
  <target name="sounds">
    <exec executable="find" output="rsrc/sounds.txt">
      <arg value="rsrc"/>
      <arg value="-name"/>
      <arg value="*.wav"/>
    </exec>
    <jar file="rsrc/sounds/effects.jar" basedir="rsrc">
      <include name="**/*.wav"/>
      <exclude name="**/source/**"/>
    </jar>
    <jar file="rsrc/sounds/music.jar" basedir="rsrc">
      <include name="**/*.mp3"/>
      <exclude name="**/source/**"/>
    </jar>
  </target>

  <!-- converts our models into JME format -->
  <target name="models">
    <taskdef name="convert" classpathref="classpath"
             classname="com.threerings.jme.tools.ConvertModelTask"/>
    <convert>
      <fileset dir="rsrc" includes="**/*.MD3"/>
      <fileset dir="rsrc" includes="**/*.obj"/>
      <fileset dir="rsrc" includes="**/*.3DS"/>
      <fileset dir="rsrc" includes="**/*.ASE"/>
    </convert>
    <jar file="rsrc/units.jar" basedir="rsrc">
      <include name="units/**/*.png"/>
      <include name="units/**/*.jme"/>
      <include name="units/**/*.properties"/>
      <exclude name="**/source/**"/>
    </jar>
    <jar file="rsrc/props.jar" basedir="rsrc">
      <include name="props/**/*.png"/>
      <include name="props/**/*.jme"/>
      <include name="props/**/*.properties"/>
      <exclude name="**/source/**"/>
    </jar>
    <jar file="rsrc/bonuses.jar" basedir="rsrc">
      <include name="bonuses/**/*.png"/>
      <include name="bonuses/**/*.jme"/>
      <include name="bonuses/**/*.properties"/>
      <exclude name="**/source/**"/>
    </jar>
    <jar file="rsrc/extras.jar" basedir="rsrc">
      <include name="extras/**/*.png"/>
      <include name="extras/**/*.jme"/>
      <include name="extras/**/*.properties"/>
      <exclude name="**/source/**"/>
    </jar>
  </target>

  <!-- loads our boards into the database -->
  <target name="boards">
    <taskdef name="loadboard"
      classname="com.threerings.bang.tools.LoadBoardTask"
      classpathref="classpath"/>
    <loadboard props="server.properties">
      <fileset dir="rsrc/boards" includes="**/*.board"/>
    </loadboard>
  </target>

  <!-- compiles our tutorial XML definitions -->
  <target name="tutorials">
    <taskdef name="confcomp" classpathref="classpath"
      classname="com.threerings.tools.CompiledConfigTask"/>
    <confcomp parser="com.threerings.bang.game.tools.xml.TutorialConfigParser">
      <fileset dir="rsrc/tutorials" includes="**/*.xml"/>
    </confcomp>
  </target>

  <!-- creates the serialized color repository config -->
  <target name="colorpos">
    <taskdef name="confcomp" classpathref="classpath"
      classname="com.threerings.tools.CompiledConfigTask"/>
    <confcomp parser="com.threerings.media.image.tools.xml.ColorPositoryParser"
      configdef="rsrc/config/media/colordefs.xml"/>
  </target>

  <!-- creates the serialized article and aspect catalogs -->
  <target name="catalogs">
    <taskdef name="confcomp" classpathref="classpath"
      classname="com.threerings.tools.CompiledConfigTask"/>
    <confcomp configdef="rsrc/avatars/articles.xml"
      parser="com.threerings.bang.avatar.tools.xml.ArticleCatalogParser"/>
    <confcomp configdef="rsrc/avatars/aspects.xml"
      parser="com.threerings.bang.avatar.tools.xml.AspectCatalogParser"/>
  </target>

  <!-- builds the avatar component bundles -->
  <target name="avatars" depends="catalogs">
    <taskdef name="metabundle" classpathref="classpath"
      classname="com.threerings.cast.bundle.tools.MetadataBundlerTask"/>
    <metabundle actiondef="rsrc/avatars/actions.xml"
      classdef="rsrc/avatars/classes.xml" target="rsrc/avatars/metadata.jar"/>
    <ant target="bundles" dir="rsrc/avatars" antfile="build.xml"/>
  </target>

  <!-- run the unit tests -->
  <target name="tests" depends="compile" description="Runs unit tests.">
    <taskdef name="unit" classpathref="classpath"
      classname="org.apache.tools.ant.taskdefs.optional.junit.JUnitTask"/>
    <unit printsummary="no" haltonfailure="yes" fork="true">
      <classpath refid="classpath"/>
      <formatter type="brief" usefile="false"/>
      <batchtest>
        <fileset dir="${src.dir}" includes="**/*UnitTest.java"/>
      </batchtest>
    </unit>
  </target>

  <!-- cleans out the compiled code -->
  <target name="clean">
    <delete dir="${deploy.dir}/classes/com"/>
  </target>

  <!-- fully cleans out the installed application -->
  <target name="distclean">
    <delete dir="${deploy.dir}"/>
  </target>

  <!-- build the java class files -->
  <target name="compile" depends="prepare,rsrc">
    <javac srcdir="${src.dir}" destdir="${deploy.dir}/classes"
           debug="on" optimize="off" deprecation="on">
      <classpath refid="classpath"/>
      <compilerarg value="-Xlint:unchecked"/>
    </javac>
  </target>

  <!-- build the javadoc documentation -->
  <target name="javadoc" depends="prepare">
    <javadoc sourcepath="${src.dir}"
             packagenames="${doc.packages}"
             windowtitle="${app.name} API"
             doctitle="${app.name} API"
             bottom="Copyright &#169; 2005 ${copy.holder}. All Rights Reserved."
             destdir="${javadoc.dir}"
             additionalparam="-breakiterator">
      <classpath refid="classpath"/>
      <link href="http://java.sun.com/j2se/1.5/docs/api/"/>
    </javadoc>
  </target>

  <!-- builds the javadocs and stuffs them in a directory where they -->
  <!-- won't be blown away when we do "clean" next time -->
  <target name="savedoc" depends="javadoc">
    <delete dir="${savedoc.dir}/api"/>
    <copy todir="${savedoc.dir}/api">
      <fileset dir="${javadoc.dir}" includes="**/*"/>
    </copy>
  </target>

  <!-- helper target for client and devclient -->
  <target name="baseclient" depends="dist">
    <!-- generate the all-in-wonder jar file -->
    <taskdef resource="proguard/ant/task.properties"
             classpath="lib/proguard.jar"/>
    <proguard configuration="etc/bang-${client}.pro"/>

    <!-- create our directories if necessary -->
    <mkdir dir="${client_dir}"/>
    <mkdir dir="${client_dir}/code"/>
    <mkdir dir="${client_dir}/rsrc"/>
    <mkdir dir="${client_dir}/native"/>

    <!-- create our configuration jar file -->
    <jar destfile="${client_dir}/code/config.jar">
      <fileset dir=".">
        <include name="deployment.properties"/>
        <include name="build.properties"/>
      </fileset>
    </jar>

    <!-- copy our various bits into the deployment directory -->
    <copy todir="${client_dir}">
      <fileset dir="projects/installers/${default_locale}">
        <include name="background.png"/>
        <include name="progress.png"/>
      </fileset>
    </copy>
    <copy todir="${client_dir}/code">
      <fileset dir="dist" includes="bang-pcode.jar"/>
      <fileset dir="lib" includes="lwjgl.jar"/>
      <fileset dir="lib" includes="lwjgl_util.jar"/>
    </copy>
    <delete file="dist/bang-pcode.jar"/>
    <copy todir="${client_dir}/rsrc">
      <fileset dir="rsrc" includes="**/*.jar"/>
      <fileset dir="rsrc" includes="config/resource/manager.properties"/>
      <fileset dir="dist" includes="bang-*.jar" excludes="bang-*code.jar"/>
    </copy>
    <copy todir="${client_dir}/native">
      <fileset dir="lib/i686-Linux" includes="*.so"/>
      <fileset dir="lib/i686-Windows" includes="*.dll"/>
      <fileset dir="lib/PowerPC-MacOS" includes="*"/>
    </copy>

    <!-- copy the getdown.txt file into the right place -->
    <copy todir="${client_dir}" overwrite="true" encoding="UTF-8">
      <fileset dir="etc" includes="getdown.txt"/>
      <filterset>
        <filter token="appbase_line" value="${appbase_line}"/>
        <filter token="version_line" value="${version_line}"/>
      </filterset>
    </copy>

    <!-- generate the getdown digest file -->
    <taskdef name="digest"
      classname="com.threerings.getdown.tools.DigesterTask">
     <classpath>
       <pathelement path="lib/samskivert.jar"/>
       <pathelement path="lib/getdown.jar"/>
     </classpath>
    </taskdef>
    <digest appdir="${client_dir}"/>
  </target>

  <!-- builds the development client getdown distribution -->
  <target name="devclient">
    <antcall target="baseclient">
      <param name="client" value="devclient"/>
      <param name="client_dir" value="${web_dir}/devclient"/>
      <param name="appbase_line" value="appbase = ${root_url}/devclient"/>
      <param name="version_line" value=""/>
    </antcall>
  </target>

  <!-- builds the production client getdown distribution -->
  <target name="client">
    <exec executable="bin/getversion" outputproperty="latest_version"
          failonerror="true">
      <arg line="client"/>
      <arg line="${root_url}"/>
    </exec>
    <echo message="Previous version used for renaming: ${latest_version}"/>
    <echo message="Generating Proguard config file for ${version}..."/>
    <exec executable="${nartool.path}/configpp" output="etc/bang-client.pro">
      <arg line="etc/bang-client.pro.in"/>
      <arg line="version=${version}"/>
      <arg line="prev_version=${latest_version}"/>
    </exec>

    <antcall target="baseclient">
      <param name="client" value="client"/>
      <param name="client_dir" value="${web_dir}/client/${version}"/>
      <param name="appbase_line"
             value="appbase = ${root_url}/client/%VERSION%"/>
      <param name="version_line" value="version = ${version}"/>
    </antcall>
    <delete file="etc/bang-client.pro"/>
  </target>

  <!-- a target for rebuilding everything -->
  <target name="all" depends="clean,prepare,compile,javadoc,dist"/>

  <!-- rebuild all the niggling bits -->
  <target name="bits" depends="colorpos,tutorials"/>

  <!-- builds the code jar file -->
  <target name="dist" depends="prepare,compile">
    <jar file="${deploy.dir}/${app.name}-code.jar"
         basedir="${deploy.dir}/classes" includes="com/**"/>
  </target>

  <!-- builds the avatar, media and sounds jar files -->
  <target name="mdist" depends="prepare,models,sounds,bits,avatars,rsrc">
    <jar file="${deploy.dir}/${app.name}-media.jar"
         basedir="${deploy.dir}/classes">
      <include name="rsrc/**"/>
    </jar>
  </target>

</project>
