<!-- build configuration -->
<project name="bang" default="compile" basedir=".">

  <!-- define some basic project parameters -->
  <property name="app.name"         value="bang"/>
  <property name="doc.packages"     value="com.threerings.bang.*"/>
  <property name="copy.holder"      value="Three Rings Design, Inc."/>

  <!-- read in our deployment properties -->
  <property file="deployment.properties"/>

  <!-- things you probably don't want to change -->
  <property name="src.dir"      value="src/java"/>
  <property name="deploy.dir"   value="dist"/>
  <property name="javadoc.dir"  value="${deploy.dir}/docs"/>
  <property name="savedoc.dir"  value="docs"/>

  <!-- declare our classpath -->
  <path id="classpath">
    <pathelement location="${deploy.dir}/classes"/>
    <fileset dir="dist" includes="${app.name}-code.jar"/>
    <fileset dir="lib" includes="**/*.jar"/>
    <fileset dir="/export/tools/lib/java" includes="**/*.jar"/>
  </path>

  <!-- generates additional methods for distributed object classes -->
  <target name="gendobj" depends="prepare">
    <taskdef name="dobj"
             classname="com.threerings.presents.tools.GenDObjectTask"
             classpathref="classpath"/>
    <!-- make sure the dobject class files are all compiled -->
    <javac srcdir="src/java" destdir="${deploy.dir}/classes"
           debug="on" optimize="${build.optimize}" deprecation="on">
      <classpath refid="classpath"/>
      <include name="**/*Object.java"/>
    </javac>
    <!-- now generate the associated files -->
    <dobj classpathref="classpath">
      <fileset dir="src/java" includes="**/*Object.java"/>
    </dobj>
  </target>

  <!-- generates marshaller and dispatcher classes for all invocation -->
  <!-- service declarations -->
  <target name="genservice"> 
    <taskdef name="service"
             classname="com.threerings.presents.tools.GenServiceTask"
             classpathref="classpath"/>
    <!-- make sure the service class files are all compiled -->
    <javac srcdir="src/java" destdir="${deploy.dir}/classes"
           debug="on" optimize="${build.optimize}" deprecation="on">
      <classpath refid="classpath"/>
      <include name="**/*Service.java"/>
    </javac>
    <!-- now generate the associated files -->
    <service header="lib/SOURCE_HEADER" classpathref="classpath">
      <fileset dir="src/java" includes="**/*Service.java"/>
    </service>
  </target>

  <!-- prepares the application directories -->
  <target name="prepare">
    <mkdir dir="${deploy.dir}"/>
    <mkdir dir="${deploy.dir}/classes"/>
    <mkdir dir="${deploy.dir}/classes/rsrc"/>
    <mkdir dir="${javadoc.dir}"/>
    <copy todir="${deploy.dir}/classes">
      <fileset dir="${src.dir}" includes="**/*.properties"/>
    </copy>
    <copy todir="${deploy.dir}/classes/rsrc">
      <fileset dir="rsrc">
       <include name="**/*"/>
       <exclude name="**/*.MD3"/>
       <exclude name="**/*.obj"/>
       <exclude name="**/*.mtl"/>
       <exclude name="avatars/**"/>
       <exclude name="tutorials/**/*.xml"/>
       <exclude name="tiles/fringe/config.xml"/>
      </fileset>
      <fileset dir="rsrc">
       <include name="avatars/*.dat"/>
      </fileset>
    </copy>
  </target>

  <!-- enumerates all of our sounds into a master list -->
  <target name="sounds">
    <exec executable="find" output="rsrc/sounds.txt">
      <arg value="rsrc"/>
      <arg value="-name"/>
      <arg value="*.wav"/>
    </exec>
  </target>

  <!-- converts our models into JME format -->
  <target name="models">
    <taskdef name="convert" classname="com.threerings.jme.tools.ConvertModelTask"
             classpathref="classpath"/>
    <convert>
      <fileset dir="rsrc" includes="**/*.MD3"/>
      <fileset dir="rsrc" includes="**/*.obj"/>
      <fileset dir="rsrc" includes="**/*.3DS"/>
      <fileset dir="rsrc" includes="**/*.ASE"/>
    </convert>
  </target>

  <!-- loads our boards into the database -->
  <target name="boards">
    <taskdef name="loadboard"
      classname="com.threerings.bang.tools.LoadBoardTask"
      classpathref="classpath"/>
    <loadboard props="server.properties">
      <fileset dir="rsrc/boards" includes="**/*.board"/>
    </loadboard>
  </target>

  <!-- compiles our tutorial XML definitions -->
  <target name="tutorials">
    <taskdef name="confcomp" classpathref="classpath"
      classname="com.threerings.tools.CompiledConfigTask"/>
    <confcomp parser="com.threerings.bang.game.tools.xml.TutorialConfigParser">
      <fileset dir="rsrc/tutorials" includes="**/*.xml"/>
    </confcomp>
  </target>

  <!-- builds sphere reflection maps from cube sky box maps -->
  <target name="spheremaps">
    <taskdef name="buildspheremap"
      classname="com.threerings.jme.tools.BuildSphereMapTask"
      classpathref="classpath"/>
    <buildspheremap front="rsrc/textures/environ/desertdayft.png"
        back="rsrc/textures/environ/desertdaybk.png"
        left="rsrc/textures/environ/desertdaylf.png"
        right="rsrc/textures/environ/desertdayrt.png"
        up="rsrc/textures/environ/desertdayup.png"
        target="rsrc/textures/environ/desertdaysp.png" size="256"/>
  </target>
  
  <!-- creates the serialized fringe config -->
  <target name="fringe">
    <taskdef name="conffringe"
      classname="com.threerings.jme.tile.tools.CompileFringeConfigurationTask"
      classpathref="classpath"/>
    <conffringe config="rsrc/tiles/fringe/config.xml"
                target="rsrc/tiles/fringe/config.dat"/>
  </target>

  <!-- creates the serialized color repository config -->
  <target name="colorpos">
    <taskdef name="confcomp" classpathref="classpath"
      classname="com.threerings.tools.CompiledConfigTask"/>
    <confcomp parser="com.threerings.media.image.tools.xml.ColorPositoryParser"
      configdef="rsrc/config/media/colordefs.xml"/>
  </target>

  <!-- creates the serialized article and aspect catalogs -->
  <target name="catalogs">
    <taskdef name="confcomp" classpathref="classpath"
      classname="com.threerings.tools.CompiledConfigTask"/>
    <confcomp configdef="rsrc/avatars/articles.xml"
      parser="com.threerings.bang.avatar.tools.xml.ArticleCatalogParser"/>
    <confcomp configdef="rsrc/avatars/aspects.xml"
      parser="com.threerings.bang.avatar.tools.xml.AspectCatalogParser"/>
  </target>

  <!-- builds the avatar component bundles -->
  <target name="avatars" depends="catalogs">
    <taskdef name="metabundle" classpathref="classpath"
      classname="com.threerings.cast.bundle.tools.MetadataBundlerTask"/>
    <metabundle actiondef="rsrc/avatars/actions.xml"
      classdef="rsrc/avatars/classes.xml" target="rsrc/avatars/metadata.jar"/>
    <ant target="bundles" dir="rsrc/avatars" antfile="build.xml"/>
  </target>

  <!-- run the unit tests -->
  <target name="tests" depends="compile" description="Runs unit tests.">
    <taskdef name="unit" classpathref="classpath"
      classname="org.apache.tools.ant.taskdefs.optional.junit.JUnitTask"/>
    <unit printsummary="no" haltonfailure="yes" fork="true">
      <classpath refid="classpath"/>
      <formatter type="brief" usefile="false"/>
      <batchtest>
        <fileset dir="${src.dir}" includes="**/*UnitTest.java"/>
      </batchtest>
    </unit>
  </target>

  <!-- cleans out the compiled code -->
  <target name="clean">
    <delete dir="${deploy.dir}/classes/com"/>
  </target>

  <!-- fully cleans out the installed application -->
  <target name="distclean">
    <delete dir="${deploy.dir}"/>
  </target>

  <!-- build the java class files -->
  <target name="compile" depends="prepare">
    <javac srcdir="${src.dir}" destdir="${deploy.dir}/classes"
           debug="on" optimize="off" deprecation="on">
      <classpath refid="classpath"/>
      <compilerarg value="-Xlint:unchecked"/>
    </javac>
  </target>

  <!-- build the javadoc documentation -->
  <target name="javadoc" depends="prepare">
    <javadoc sourcepath="${src.dir}"
             packagenames="${doc.packages}"
             windowtitle="${app.name} API"
             doctitle="${app.name} API"
             bottom="Copyright &#169; 2005 ${copy.holder}. All Rights Reserved."
             destdir="${javadoc.dir}"
             additionalparam="-breakiterator">
      <classpath refid="classpath"/>
      <link href="http://java.sun.com/j2se/1.5/docs/api/"/>
    </javadoc>
  </target>

  <!-- builds the javadocs and stuffs them in a directory where they -->
  <!-- won't be blown away when we do "clean" next time -->
  <target name="savedoc" depends="javadoc">
    <delete dir="${savedoc.dir}/api"/>
    <copy todir="${savedoc.dir}/api">
      <fileset dir="${javadoc.dir}" includes="**/*"/>
    </copy>
  </target>

  <!-- builds the client getdown distribution -->
  <target name="client" depends="dist">
    <!-- generate the all-in-wonder jar file -->
    <taskdef resource="proguard/ant/task.properties"
             classpath="lib/proguard.jar"/>
    <proguard configuration="etc/bang-client.pro"/>

    <!-- copy our various bits into the deployment directory -->
    <copy todir="pages/client">
      <fileset dir="projects/installers/${default_locale}">
        <include name="background.png"/>
      </fileset>
    </copy>
    <copy todir="pages/client/code">
      <fileset dir="dist" includes="bang-pcode.jar"/>
      <fileset dir="lib" includes="lwjgl.jar"/>
      <fileset dir="lib" includes="lwjgl_util.jar"/>
    </copy>
    <copy todir="pages/client/rsrc">
      <fileset dir="rsrc" includes="**/*.jar"/>
      <fileset dir="rsrc" includes="config/resource/manager.properties"/>
      <fileset dir="dist" includes="bang-*.jar" excludes="bang-*code.jar"/>
    </copy>
    <copy todir="pages/client/native">
      <fileset dir="lib/i686-Linux" includes="*.so"/>
      <fileset dir="lib/i686-Windows" includes="*.dll"/>
      <fileset dir="lib/PowerPC-MacOS" includes="*"/>
    </copy>

    <!-- copy the getdown.txt file into the right place -->
    <copy todir="pages/client" overwrite="true" encoding="UTF-8">
      <fileset dir="etc" includes="getdown.txt"/>
      <filterset>
        <filter token="app_root" value="${root_url}"/>
        <filter token="server_host" value="${server_host}"/>
        <filter token="server_port" value="${server_port}"/>
      </filterset>
    </copy>

    <!-- generate the getdown digest file -->
    <taskdef name="digest"
      classname="com.threerings.getdown.tools.DigesterTask">
     <classpath>
       <pathelement path="lib/samskivert.jar"/>
       <pathelement path="lib/getdown.jar"/>
     </classpath>
    </taskdef>
    <digest appdir="pages/client"/>
  </target>

  <!-- a target for rebuilding everything -->
  <target name="all" depends="clean,prepare,compile,javadoc,dist"/>

  <!-- rebuild all the niggling bits -->
  <target name="bits" depends="colorpos,fringe,spheremaps,tutorials"/>

  <!-- builds the code jar file -->
  <target name="dist" depends="prepare,compile">
    <jar file="${deploy.dir}/${app.name}-code.jar"
         basedir="${deploy.dir}/classes" includes="com/**"/>
  </target>

  <!-- builds the avatar, media and sounds jar files -->
  <target name="mdist" depends="prepare,bits,sounds,models,avatars">
    <jar file="${deploy.dir}/${app.name}-media.jar"
         basedir="${deploy.dir}/classes">
      <include name="rsrc/**"/>
      <exclude name="**/source/**"/>
      <exclude name="rsrc/sounds/**"/>
    </jar>
    <jar file="${deploy.dir}/${app.name}-sounds.jar"
         basedir="${deploy.dir}/classes">
      <include name="rsrc/sounds/**"/>
      <exclude name="**/source/**"/>
    </jar>
  </target>

</project>
