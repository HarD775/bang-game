#!/bin/sh
#
# $Id$
#
# A script to invoke the Bang! server and email the generated logs when it
# eventually exits.

NAME=bang
DESC="Bang game server"

BANG_HOME=`dirname $0 | sed s:/bin$::`
BANG_USER=www-data
TOOLS_HOME=$BANG_HOME/projects/tools
HOSTNAME=`hostname`

# Make sure our nodename was properly specified
NODE=$1
if [ -z "$NODE" ]; then
    echo "Usage: $0 nodename"
    exit 255
fi

LOGFILE=$BANG_HOME/log/stdout-$NODE.log
LOG_EMAIL=nightly-logs@threerings.net
LOGLEVEL=info
SERVER_MEMORY=384M

# Override settings with those from BANG_HOME/server.conf
if [ -f $BANG_HOME/server.conf ]; then
    . $BANG_HOME/server.conf
else
    echo "Can't load $BANG_HOME/server.conf; can't run server."
    exit 255
fi

# Make sure we're running as the correct user
WHOAMI=`whoami`
if [ "$WHOAMI" != "$BANG_USER" ]; then
    echo "This script must be run as $BANG_USER."
    exit 255
fi

CLASS=com.threerings.bang.server.BangServer
JAVA_ARGS="-server -mx$SERVER_MEMORY \
    -Dbang.home=$BANG_HOME \
    -Dresource_dir=$BANG_HOME/rsrc \
    -Dno_unpack_resources=true \
    -Dhostname=$HOSTNAME \
    -Dis_node=true \
    -Dnode=$NODE \
    -Drsrc_cache_dir=/tmp -Dlog_level=$LOGLEVEL"

#    -XX:+UseParNewGC -XX:+UseAdaptiveSizePolicy -XX:MaxNewSize=64m \
#    -XX:+PrintGCDetails -XX:+PrintTenuringDistribution -XX:+PrintHeapAtGC \

umask 002

JAVA_VM="$JAVA_HOME/bin/java"
if [ ! -e $JAVA_VM ]; then
    echo "$0: Cannot find JVM in $JAVA_HOME. Exiting."
    exit 255
fi

# Some temporary business for multiprocessor FreeBSD machines
NEEDS_MEMBAR=`$JAVA_VM -fullversion 2>&1 | grep diablo`
if [ ! -z "$NEEDS_MEMBAR" ]; then
     JAVA_ARGS="$JAVA_ARGS -XX:+UseMembar"
     export ANT_OPTS="-XX:+UseMembar"
fi

# Start with the standard Java classes
CLASSPATH="$JAVA_HOME/jre/lib/rt.jar"

# Add all necessary JAR files to the CLASSPATH
for jar in $BANG_HOME/lib/*.jar $BANG_HOME/dist/bang-*.jar; do
    if [ -e $jar ]; then
        CLASSPATH=$jar:$CLASSPATH
    fi
done

# Add the deployment directory to the CLASSPATH (so that $BANG_HOME/rsrc
# is accessible)
CLASSPATH=$BANG_HOME:$CLASSPATH
export CLASSPATH

# Set up the LD_LIBRARY_PATH to include our shared libraries
LD_LIBRARY_PATH=$BANG_HOME/lib/`uname -m`-`uname -s`
export LD_LIBRARY_PATH

# Create the logfile
touch $LOGFILE

cd $BANG_HOME

# Reload the board database from the source files
if [ $NODE == "frontier_town" ]; then
    if [ ! -z "`find $BANG_HOME/rsrc/boards -name \*.board`" ] ; then
        echo "Rebuilding board database:" >>$LOGFILE
        $TOOLS_HOME/bin/ant boards >>$LOGFILE 2>&1
        # delete the board files; they're in the database now and need not be
        # reloaded until the next release and we need to prevent stale boards
        # from lingering on the production servers
        find $BANG_HOME/rsrc/boards -name \*.board | xargs rm
    fi
fi

# Start up the server
echo "Running Bang server:" >>$LOGFILE
echo " Deployment root: $BANG_HOME" >>$LOGFILE
echo "         Java VM: $JAVA_VM" >>$LOGFILE
echo "       Java args: $JAVA_ARGS" >>$LOGFILE
echo "    Server class: $CLASS" >>$LOGFILE

$JAVA_VM $JAVA_ARGS $CLASS >>$LOGFILE 2>&1
EXIT_CODE=$?

# Mail out some reports
# cat $LOGFILE | $BANG_HOME/projects/tools/bin/sum_invokers | \
#     $MAIL -s "$HOSTNAME: $BANG_HOME invoker summary" $LOG_EMAIL
# cat $LOGFILE | $BANG_HOME/projects/tools/bin/lfilter | \
#     grep -v "Invoker unit" | grep ' ! ' | cut -c 25-80 | sort | uniq -c | \
#     sort -nr | $MAIL -s "$HOSTNAME: $BANG_HOME error summary" $LOG_EMAIL
cat $LOGFILE | $BANG_HOME/projects/tools/bin/lfilter | \
    $MAIL -s "$HOSTNAME: $BANG_HOME filtered log" $LOG_EMAIL

# Archive the server log
NOW=`date "+%F-%H:%M"`
mv $LOGFILE $LOGFILE.$NOW

# Prune old logs
find $BANG_HOME/log -name 'stdout-$NODE.log*' -a -mtime +7 | xargs rm -f

exit $EXIT_CODE
