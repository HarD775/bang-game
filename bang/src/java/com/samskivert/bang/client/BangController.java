//
// $Id$

package com.samskivert.bang.client;

import java.awt.event.ActionEvent;

import com.samskivert.swing.event.CommandEvent;
import com.samskivert.util.StringUtil;

import com.threerings.presents.dobj.MessageEvent;
import com.threerings.presents.dobj.MessageListener;

import com.threerings.crowd.client.PlaceView;
import com.threerings.crowd.data.BodyObject;
import com.threerings.crowd.data.PlaceConfig;
import com.threerings.crowd.data.PlaceObject;
import com.threerings.crowd.util.CrowdContext;

import com.threerings.parlor.game.client.GameController;

import com.threerings.toybox.util.ToyBoxContext;

import com.samskivert.bang.data.BangObject;
import com.samskivert.bang.data.Shot;
import com.samskivert.bang.data.effect.Effect;

import static com.samskivert.bang.Log.log;

/**
 * Handles the logic and flow of the client side of a game.
 */
public class BangController extends GameController
{
    /** The name of the command posted by the "Back to lobby" button in
     * the side bar. */
    public static final String BACK_TO_LOBBY = "BackToLobby";

    /** A command that requests to move a piece. */
    public static final String MOVE_PIECE = "MovePiece";

    /** A command that requests to fire a shot. */
    public static final String FIRE_SHOT = "FireShot";

    @Override // documentation inherited
    public void init (CrowdContext ctx, PlaceConfig config)
    {
        super.init(ctx, config);
        _ctx = (ToyBoxContext)ctx;
    }

    @Override // documentation inherited
    public void willEnterPlace (PlaceObject plobj)
    {
        super.willEnterPlace(plobj);
        _bangobj = (BangObject)plobj;

        // determine our player index
        BodyObject me = (BodyObject)_ctx.getClient().getClientObject();
        _pidx = _bangobj.getPlayerIndex(me.username);

//         // add our tick listener
//         _bangobj.addListener(_ticklist);

        // we may be returning to an already started game
        if (_bangobj.isInPlay()) {
            _panel.startGame(_bangobj, _pidx);
        }
    }

    @Override // documentation inherited
    public void didLeavePlace (PlaceObject plobj)
    {
        super.didLeavePlace(plobj);
//         _bangobj.removeListener(_ticklist);
    }

    /** Handles a request to leave the game. Generated by the {@link
     * #BACK_TO_LOBBY} command. */
    public void handleBackToLobby (Object source)
    {
        _ctx.getLocationDirector().moveBack();
    }

    /** Handles a request to move a piece. Generated by the
     * {@link #MOVE_PIECE} command. */
    public void handleMovePiece (Object source, int[] data)
    {
        log.info("Requesting move: " + StringUtil.toString(data));
        _bangobj.service.move(_ctx.getClient(),
                              data[0], (short)data[1], (short)data[2]);
    }

    /** Handles a request to fire a shot. Generated by the {@link
     * #FIRE_SHOT} command. */
    public void handleFireShot (Object source, Shot shot)
    {
        log.info("Requesting shot: " + shot);
        _bangobj.service.fire(_ctx.getClient(), shot.shooterId, shot.targetId);
    }

    @Override // documentation inherited
    protected PlaceView createPlaceView (CrowdContext ctx)
    {
        _panel = new BangPanel((ToyBoxContext)ctx, this);
        return _panel;
    }

    @Override // documentation inherited
    protected void gameDidStart ()
    {
        super.gameDidStart();

        // we may be returning to an already started game
        _panel.startGame(_bangobj, _pidx);
    }

    @Override // documentation inherited
    protected void gameWillReset ()
    {
        super.gameWillReset();
        _panel.endGame();
    }

    @Override // documentation inherited
    protected void gameDidEnd ()
    {
        super.gameDidEnd();
        _panel.endGame();
    }

//     /** Called when we have received the final data associated with our
//      * tick. */
//     protected void tickFinished (Shot[] shots, Effect[] effects)
//     {
//         _panel.view.tickFinished(shots, effects);
//     }

//     /** Listens for the "end of tick" indicator. */
//     protected MessageListener _ticklist = new MessageListener() {
//         public void messageReceived (MessageEvent event) {
//             if (event.getName().equals("ticked")) {
//                 Object[] args = event.getArgs();
//                 tickFinished((Shot[])args[0], (Effect[])args[1]);
//             }
//         }
//     };

    /** A casted reference to our context. */
    protected ToyBoxContext _ctx;

    /** Contains our main user interface. */
    protected BangPanel _panel;

    /** A casted reference to our game object. */
    protected BangObject _bangobj;

    /** Our player index or -1 if we're not a player. */
    protected int _pidx;
}
