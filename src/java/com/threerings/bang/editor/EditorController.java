//
// $Id$

package com.threerings.bang.editor;

import java.awt.Point;
import javax.swing.JFileChooser;

import java.io.IOException;

import com.samskivert.swing.event.CommandEvent;

import com.threerings.util.MessageBundle;

import com.threerings.crowd.client.PlaceView;
import com.threerings.crowd.data.PlaceConfig;
import com.threerings.crowd.data.PlaceObject;
import com.threerings.crowd.util.CrowdContext;

import com.threerings.parlor.game.client.GameController;
import com.threerings.toybox.data.ToyBoxGameConfig;
import com.threerings.toybox.util.ToyBoxContext;

import com.threerings.bang.data.BangCodes;
import com.threerings.bang.data.BangObject;
import com.threerings.bang.data.Terrain;
import com.threerings.bang.data.piece.Piece;
import com.threerings.bang.util.BoardUtil;

import static com.threerings.bang.Log.log;

/**
 * Handles the logic and flow for the Bang! board editor.
 */
public class EditorController extends GameController
{
    /** The name of the command posted by the "Back to lobby" button in
     * the side bar. */
    public static final String BACK_TO_LOBBY = "BackToLobby";

    /** Instructs us to paint the specified coordinate with the currently
     * selected terrain type. */
    public static final String PAINT_TERRAIN = "PaintTerrain";

    /** Instructs us to clear the specified terrain coordinate. */
    public static final String CLEAR_TERRAIN = "ClearTerrain";

    /** Instructs us to "roll" the terrain selection up or down. */
    public static final String ROLL_TERRAIN_SELECTION = "RollTerrain";

    /** Instructs us to create a piece of the supplied type. */
    public static final String CREATE_PIECE = "CreatePiece";

    /** Instructs us to rotate the supplied piece clockwise. */
    public static final String ROTATE_PIECE_CW = "RotatePieceCW";

    /** Instructs us to rotate the supplied piece counter-clockwise. */
    public static final String ROTATE_PIECE_CCW = "RotatePieceCCW";

    /** Instructs us to save the current board. */
    public static final String SAVE_BOARD = "SaveBoard";

    /** Handles a request to leave the game. Generated by the {@link
     * #BACK_TO_LOBBY} command. */
    public void handleBackToLobby (Object source)
    {
        _ctx.getLocationDirector().moveBack();
    }

    /** Handles a request to paint a tile of terrain. Generated by the
     * {@link #PAINT_TERRAIN} command. */
    public void handlePaintTerrain (Object source, Point tile)
    {
        _panel.view.setTile(tile.x, tile.y, _panel.terrain.getSelectedTerrain());
    }

    /** Handles a request to clear a tile of terrain. Generated by the
     * {@link #CLEAR_TERRAIN} command. */
    public void handleClearTerrain (Object source, Point tile)
    {
        _panel.view.setTile(tile.x, tile.y, Terrain.NONE);
    }

    /** Handles a request to adjust the terrain selection. Generated by
     * the {@link #ROLL_TERRAIN_SELECTION} command. */
    public void handleRollTerrain (Object source, Integer direction)
    {
        _panel.terrain.rollSelection(direction);
    }

    /** Handles a request to create a new piece and add it to the board.
     * Generated by the {@link #CREATE_PIECE} command. */
    public void handleCreatePiece (Object source, Piece piece)
    {
        piece = (Piece)piece.clone();
        piece.assignPieceId();
        piece.position(0, 0);
        _bangobj.addToPieces(piece);
    }

    /** Handles a request to rotate the specified piece clockwise.
     * Generated by the {@link #ROTATE_PIECE_CW} command. */
    public void handleRotatePieceCW (Object source, Piece piece)
    {
        if (piece.rotate(Piece.CW)) {
            _bangobj.updatePieces(piece);
        }
    }

    /** Handles a request to rotate the specified piece counter-clockwise.
     * Generated by the {@link #ROTATE_PIECE_CCW} command. */
    public void handleRotatePieceCCW (Object source, Piece piece)
    {
        if (piece.rotate(Piece.CCW)) {
            _bangobj.updatePieces(piece);
        }
    }

    /** Handles a request to save the current board.  Generated by the
     * {@link #SAVE_BOARD} command. */
    public void handleSaveBoard (Object source)
    {
        if (_chooser == null) {
            _chooser = new JFileChooser();
        }
        int rv = _chooser.showSaveDialog(_panel);
        if (rv == JFileChooser.APPROVE_OPTION) {
            try {
                BoardUtil.saveBoard(_bangobj.board, _bangobj.getPieceArray(),
                                    _chooser.getSelectedFile());
                log.info("Saved to: " + _chooser.getSelectedFile());
            } catch (IOException ioe) {
                String msg = MessageBundle.tcompose(
                    "m.save_error", ioe.getMessage());
                displayMessage(msg, true);
            }
        }
    }

    // documentation inherited
    public void init (CrowdContext ctx, PlaceConfig config)
    {
        super.init(ctx, config);
        _ctx = (ToyBoxContext)ctx;
        _config = (ToyBoxGameConfig)config;
    }

    // documentation inherited
    public void willEnterPlace (PlaceObject plobj)
    {
        super.willEnterPlace(plobj);
        _bangobj = (BangObject)plobj;

        // we may be returning to an already started game
        if (_bangobj.isInPlay()) {
            _panel.startGame(_bangobj, _config);
        }
    }

    // documentation inherited
    protected PlaceView createPlaceView (CrowdContext ctx)
    {
        _panel = new EditorPanel((ToyBoxContext)ctx, this);
        return _panel;
    }

    // documentation inherited
    protected void gameDidStart ()
    {
        super.gameDidStart();

        // our panel needs to do some game starting business
        _panel.startGame(_bangobj, _config);
    }

    // documentation inherited
    protected void gameWillReset ()
    {
        super.gameWillReset();
        _panel.endGame();
    }

    // documentation inherited
    protected void gameDidEnd ()
    {
        super.gameDidEnd();
        _panel.endGame();
    }

    /** Displays an error feedback message to the user. */
    protected void displayMessage (String message, boolean attention)
    {
        // TODO: add some sort of status display
    }

    /** A casted reference to our context. */
    protected ToyBoxContext _ctx;

    /** The configuration of this game. */
    protected ToyBoxGameConfig _config;

    /** Contains our main user interface. */
    protected EditorPanel _panel;

    /** A casted reference to our game object. */
    protected BangObject _bangobj;

    /** The file chooser we use for loading and saving. */
    protected JFileChooser _chooser;
}
